{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"_exploded":{},"_verified":{},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$10","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/api/helpSession.js","filename":"imports/api/helpSession.js","sourceMapTarget":"imports/api/helpSession.js.map","sourceMaps":true,"presets":[],"passPerPreset":false,"envName":"development","cwd":"/Users/Zac/Documents/Code/GitHub/Meteor/helpmates","parserOpts":{"sourceType":"module","sourceFileName":"imports/api/helpSession.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","classProperties","asyncGenerators"]},"generatorOpts":{"filename":"imports/api/helpSession.js","comments":true,"compact":false,"sourceMaps":true,"sourceMapTarget":"imports/api/helpSession.js.map","sourceFileName":"imports/api/helpSession.js"}},"code":"let Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Conversations;\nmodule.watch(require(\"./conversations\"), {\n  default(v) {\n    Conversations = v;\n  }\n\n}, 2);\nlet Courses;\nmodule.watch(require(\"./courses\"), {\n  default(v) {\n    Courses = v;\n  }\n\n}, 3);\nconst HelpSessions = new Mongo.Collection('helpSessions');\nMeteor.methods({\n  // SETTERS\n  'helpSessions.create': ({\n    studentId,\n    tutorId,\n    courseId,\n    startDate,\n    endDate\n  }) => {\n    // get cost of this session\n    tutor = Meteor.users.find({\n      _id: tutorId\n    }).fetch();\n    console.log(tutor.profile.completedCourses);\n    cost = tutor.profile.completedCourses[courseId]; // create new conversation\n\n    conversationId = Conversations.insert({\n      messages: []\n    }); // create new help session with link to convo\n\n    return HelpSessions.insert({\n      studentId,\n      tutorId,\n      courseId,\n      cost,\n      startDate,\n      endDate,\n      tutorAccepted: false,\n      tutorDenied: false,\n      tutorStarted: false,\n      studentStarted: false,\n      tutorEnded: false,\n      studentEnded: false,\n      denyMessage: \"\",\n      cancelled: false,\n      cancelledBy: null,\n      cancelMessage: \"\",\n      conversationId: conversationId\n    });\n  },\n  'helpSessions.accept': ({\n    sessionId\n  }) => {\n    // find session\n    const session = HelpSessions.findOne(sessionId);\n\n    if (session.tutorId == Meteor.userId()) {\n      HelpSessions.update({\n        _id: sessionId\n      }, {\n        $set: {\n          tutorAccepted: true\n        }\n      });\n      return true;\n    }\n\n    return {\n      error: \"You do not have access to this session\"\n    };\n  },\n  'helpSessions.start': ({\n    sessionId\n  }) => {\n    const session = HelpSessions.findOne(sessionId);\n    const userId = Meteor.userId(); // make sure session exists\n\n    if (!session) {\n      return {\n        error: \"Session not found\"\n      };\n    } // if the user is the tutor, set tutorAccepted to true\n\n\n    if (session.tutorId == userId) {\n      // edit local document so we can check the values later\n      session.tutorStarted = true;\n      HelpSessions.update(sessionId, {\n        $set: {\n          tutorStarted: true\n        }\n      });\n    } // if the user is the student, set studentAccepted to true\n\n\n    if (session.studentId == userId) {\n      // edit local document so we can check the values later\n      session.studentStarted = true;\n      HelpSessions.update(sessionId, {\n        $set: {\n          studentStarted: true\n        }\n      });\n    } // set started at if both have started\n\n\n    if (session.tutorStarted && session.studentStarted) {\n      HelpSessions.update(sessionId, {\n        $set: {\n          startedAt: new Date()\n        }\n      });\n    }\n  }\n});\nMeteor.publish('mySessions', function () {\n  var sessionsCursor = HelpSessions.find({\n    $or: [{\n      studentId: Meteor.userId()\n    }, {\n      tutorId: Meteor.userId()\n    }]\n  }, {\n    fields: {\n      _id: 1,\n      courseId: 1,\n      studentId: 1,\n      tutorId: 1,\n      tutorAccepted: 1,\n      tutorDenied: 1,\n      cancelled: 1\n    }\n  });\n  var sessions = sessionsCursor.fetch();\n\n  var studentIds = _.pluck(sessions, \"studentId\");\n\n  var tutorIds = _.pluck(sessions, \"tutorId\");\n\n  var userIds = tutorIds.concat(studentIds);\n\n  var courseIds = _.pluck(sessions, \"courseId\");\n\n  var usersCursor = Meteor.users.find({\n    _id: {\n      $in: userIds\n    }\n  });\n  var coursesCursor = Courses.find({\n    _id: {\n      $in: courseIds\n    }\n  });\n  return [sessionsCursor, usersCursor, coursesCursor];\n});\nMeteor.publish('session', function ({\n  id\n}) {\n  // get cursor for this session\n  var sessionCursor = HelpSessions.find({\n    _id: id\n  }); // get the data, make sure the session exists\n\n  var sessionData = HelpSessions.findOne(id);\n\n  if (!sessionData) {\n    return {\n      error: \"Session not found\"\n    };\n  } // get cursors for each user and conversation\n\n\n  var conversationCursor = Conversations.find({\n    _id: sessionData.conversationId\n  });\n  return [sessionCursor, conversationCursor];\n});\nmodule.exportDefault(HelpSessions);","map":{"version":3,"sources":["imports/api/helpSession.js"],"names":["Mongo","module","watch","require","v","Meteor","Conversations","default","Courses","HelpSessions","Collection","methods","studentId","tutorId","courseId","startDate","endDate","tutor","users","find","_id","fetch","console","log","profile","completedCourses","cost","conversationId","insert","messages","tutorAccepted","tutorDenied","tutorStarted","studentStarted","tutorEnded","studentEnded","denyMessage","cancelled","cancelledBy","cancelMessage","sessionId","session","findOne","userId","update","$set","error","startedAt","Date","publish","sessionsCursor","$or","fields","sessions","studentIds","_","pluck","tutorIds","userIds","concat","courseIds","usersCursor","$in","coursesCursor","id","sessionCursor","sessionData","conversationCursor","exportDefault"],"mappings":"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","file":"imports/api/helpSession.js.map","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\n\nimport Conversations from './conversations';\nimport Courses from \"./courses\";\n\nconst HelpSessions = new Mongo.Collection('helpSessions');\n\nMeteor.methods({\n    // SETTERS\n    'helpSessions.create': ({ studentId, tutorId, courseId, startDate, endDate }) => {\n        // get cost of this session\n        tutor = Meteor.users.find({_id: tutorId}).fetch()\n        console.log(tutor.profile.completedCourses)\n        cost = tutor.profile.completedCourses[courseId]\n        // create new conversation\n        conversationId = Conversations.insert({messages: []})\n        // create new help session with link to convo\n        return HelpSessions.insert({ studentId, tutorId, courseId, cost, startDate, endDate, tutorAccepted: false, tutorDenied: false, tutorStarted: false, studentStarted: false, tutorEnded: false, studentEnded: false,  denyMessage: \"\", cancelled: false, cancelledBy: null, cancelMessage: \"\", conversationId: conversationId  });\n    },\n    'helpSessions.accept': ({ sessionId }) => {\n        // find session\n        const session = HelpSessions.findOne(sessionId)\n        if (session.tutorId == Meteor.userId()) {\n            HelpSessions.update(\n                {_id: sessionId},\n                {$set: {tutorAccepted: true}}\n            )\n            return true\n        }\n        return {error: \"You do not have access to this session\"}\n    },\n    'helpSessions.start': ({ sessionId }) => {\n        const session = HelpSessions.findOne(sessionId)\n        const userId = Meteor.userId()\n        // make sure session exists\n        if (!session) {\n            return {error: \"Session not found\"}\n        }\n        // if the user is the tutor, set tutorAccepted to true\n        if (session.tutorId == userId) {\n            // edit local document so we can check the values later\n            session.tutorStarted = true\n            HelpSessions.update(\n                sessionId, \n                {$set: {tutorStarted: true}}\n            )\n        }\n        // if the user is the student, set studentAccepted to true\n        if (session.studentId == userId) {\n            // edit local document so we can check the values later\n            session.studentStarted = true\n            HelpSessions.update(\n                sessionId, \n                {$set: {studentStarted: true}}\n            )\n        }\n        // set started at if both have started\n        if (session.tutorStarted && session.studentStarted) {\n            HelpSessions.update(\n                sessionId, \n                {$set: {startedAt: new Date()}}\n            )\n        }\n    }\n});\n\nMeteor.publish('mySessions', function () {\n    var sessionsCursor = HelpSessions.find({$or: [{studentId: Meteor.userId()}, {tutorId: Meteor.userId()}]}, {\n        fields: {_id: 1, courseId: 1, studentId: 1, tutorId: 1, tutorAccepted: 1, tutorDenied: 1, cancelled: 1}\n    })\n    var sessions = sessionsCursor.fetch()\n\n    var studentIds =  _.pluck(sessions,\"studentId\");\n    var tutorIds = _.pluck(sessions,\"tutorId\");\n\n    var userIds = tutorIds.concat(studentIds);\n    var courseIds = _.pluck(sessions, \"courseId\")\n\n    var usersCursor = Meteor.users.find({\n        _id : {$in : userIds}\n    });\n\n    var coursesCursor = Courses.find({_id: {$in : courseIds}})\n\n    return [\n        sessionsCursor,\n        usersCursor,\n        coursesCursor,\n    ];\n});\n\nMeteor.publish('session', function({id}) {\n    // get cursor for this session\n    var sessionCursor = HelpSessions.find({_id: id})\n    // get the data, make sure the session exists\n    var sessionData = HelpSessions.findOne(id)\n    if (!sessionData) {\n        return {error: \"Session not found\"}\n    }\n    // get cursors for each user and conversation\n    var conversationCursor = Conversations.find({_id: sessionData.conversationId})\n\n    return [\n        sessionCursor,\n        conversationCursor,\n    ];\n});\n\nexport default HelpSessions;"]},"hash":"dd263248900010fc66332ffb9da70ec548a98487"}
