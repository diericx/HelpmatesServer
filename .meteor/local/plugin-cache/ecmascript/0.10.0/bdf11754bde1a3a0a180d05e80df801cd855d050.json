{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$6","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$8","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$10","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$12","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$13","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$16","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$17","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$18","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$20","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$21","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$22","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$23","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$24","visitor":{"_exploded":{},"_verified":{},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/api/helpSession.js","filename":"imports/api/helpSession.js","sourceMapTarget":"imports/api/helpSession.js.map","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/Users/Zac/Documents/Code/GitHub/Meteor/helpmates","parserOpts":{"sourceType":"module","sourceFileName":"imports/api/helpSession.js","plugins":["dynamicImport","classProperties","jsx","jsx","flow","asyncGenerators","objectRestSpread","objectRestSpread","flow","asyncGenerators"]},"generatorOpts":{"filename":"imports/api/helpSession.js","comments":true,"compact":false,"sourceMaps":true,"sourceMapTarget":"imports/api/helpSession.js.map","sourceFileName":"imports/api/helpSession.js"}},"code":"var Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Random;\nmodule.watch(require(\"meteor/random\"), {\n  Random: function (v) {\n    Random = v;\n  }\n}, 2);\nvar Conversations;\nmodule.watch(require(\"./conversations\"), {\n  \"default\": function (v) {\n    Conversations = v;\n  }\n}, 3);\nvar Courses;\nmodule.watch(require(\"./courses\"), {\n  \"default\": function (v) {\n    Courses = v;\n  }\n}, 4);\nvar HelpSessions = new Mongo.Collection('helpSessions');\nMeteor.methods({\n  // SETTERS\n  'helpSessions.create': function (_ref) {\n    var studentId = _ref.studentId,\n        tutorId = _ref.tutorId,\n        courseId = _ref.courseId,\n        startDate = _ref.startDate,\n        endDate = _ref.endDate,\n        initialMessageText = _ref.initialMessageText;\n    // get cost of this session\n    tutor = Meteor.users.findOne({\n      _id: tutorId\n    });\n    student = Meteor.users.findOne({\n      _id: studentId\n    });\n    cost = tutor.profile.completedCourses[courseId]; // make sure cost, tutor and student exist\n\n    if (!cost || !tutor || !student) {\n      return false;\n    } // create new conversation for this session\n\n\n    conversationId = Conversations.insert({\n      messages: []\n    }); // create initial message\n\n    var initialMessageTextPrefix = \"Hi! I need help with \";\n    var message = {\n      text: initialMessageTextPrefix + initialMessageText,\n      user: {\n        _id: studentId,\n        name: student.profile.name\n      },\n      createdAt: new Date(),\n      _id: Random.id() // send initial message\n\n    };\n    Meteor.call(\"conversations.sendMessage\", {\n      conversationId: conversationId,\n      message: message\n    }); // create new help session with link to convo\n\n    return HelpSessions.insert({\n      studentId: studentId,\n      tutorId: tutorId,\n      courseId: courseId,\n      cost: cost,\n      startDate: startDate,\n      endDate: endDate,\n      tutorAccepted: false,\n      tutorDenied: false,\n      tutorStarted: false,\n      studentStarted: false,\n      tutorEnded: false,\n      studentEnded: false,\n      denyMessage: \"\",\n      cancelled: false,\n      cancelledBy: null,\n      cancelMessage: \"\",\n      conversationId: conversationId\n    });\n  },\n  'helpSessions.accept': function (_ref2) {\n    var sessionId = _ref2.sessionId;\n    // find session\n    var session = HelpSessions.findOne(sessionId);\n    var tutor = Meteor.users.findOne({\n      _id: session.tutorId\n    }); // make sure this user has authority to accept a session\n\n    if (session.tutorId == Meteor.userId()) {\n      HelpSessions.update({\n        _id: sessionId\n      }, {\n        $set: {\n          tutorAccepted: true\n        }\n      }); // send system message update\n\n      var message = {\n        _id: Random.id(),\n        text: tutor.profile.name + \" accepted! Figure out where to meet.\",\n        createdAt: new Date(),\n        system: true // send system message\n\n      };\n      Meteor.call(\"conversations.sendMessage\", {\n        conversationId: session.conversationId,\n        message: message\n      });\n      return true;\n    }\n\n    return {\n      error: \"You do not have access to this session\"\n    };\n  },\n  'helpSessions.end': function (_ref3) {\n    var sessionId = _ref3.sessionId;\n    // find session\n    var session = HelpSessions.findOne(sessionId);\n\n    if (session.tutorId == Meteor.userId()) {\n      HelpSessions.update({\n        _id: sessionId\n      }, {\n        $set: {\n          tutorEnded: true\n        }\n      });\n      session.tutorEnded = true;\n    } else if (session.studentId == Meteor.userId()) {\n      HelpSessions.update({\n        _id: sessionId\n      }, {\n        $set: {\n          studentEnded: true\n        }\n      });\n    } // if they both ended, add an ended date\n\n\n    if (session.studentEnded && session.tutorEnded) {\n      HelpSessions.update({\n        _id: sessionId\n      }, {\n        $set: {\n          endedAt: new Date()\n        }\n      });\n      session.studentEnded = true;\n    }\n  },\n  'helpSessions.start': function (_ref4) {\n    var sessionId = _ref4.sessionId;\n    var session = HelpSessions.findOne(sessionId);\n    var userId = Meteor.userId(); // make sure session exists\n\n    if (!session) {\n      return {\n        error: \"Session not found\"\n      };\n    } // if the user is the tutor, set tutorAccepted to true\n\n\n    if (session.tutorId == userId) {\n      // edit local document so we can check the values later\n      session.tutorStarted = true;\n      HelpSessions.update(sessionId, {\n        $set: {\n          tutorStarted: true\n        }\n      });\n    } // if the user is the student, set studentAccepted to true\n\n\n    if (session.studentId == userId) {\n      // edit local document so we can check the values later\n      session.studentStarted = true;\n      HelpSessions.update(sessionId, {\n        $set: {\n          studentStarted: true\n        }\n      });\n    } // set started at if both have started\n\n\n    if (session.tutorStarted && session.studentStarted) {\n      HelpSessions.update(sessionId, {\n        $set: {\n          startedAt: new Date()\n        }\n      });\n    }\n  }\n});\nMeteor.publish('mySessions', function () {\n  var sessionsCursor = HelpSessions.find({\n    $or: [{\n      studentId: Meteor.userId()\n    }, {\n      tutorId: Meteor.userId()\n    }]\n  }, {\n    fields: {\n      _id: 1,\n      courseId: 1,\n      studentId: 1,\n      tutorId: 1,\n      tutorAccepted: 1,\n      tutorDenied: 1,\n      cancelled: 1,\n      startDate: 1,\n      endDate: 1,\n      endedAt: 1,\n      startedAt: 1\n    }\n  });\n  var sessions = sessionsCursor.fetch();\n\n  var studentIds = _.pluck(sessions, \"studentId\");\n\n  var tutorIds = _.pluck(sessions, \"tutorId\");\n\n  var userIds = tutorIds.concat(studentIds);\n\n  var courseIds = _.pluck(sessions, \"courseId\");\n\n  var usersCursor = Meteor.users.find({\n    _id: {\n      $in: userIds\n    }\n  });\n  var coursesCursor = Courses.find({\n    _id: {\n      $in: courseIds\n    }\n  });\n  return [sessionsCursor, usersCursor, coursesCursor];\n});\nMeteor.publish('session', function (_ref5) {\n  var id = _ref5.id;\n  // get cursor for this session\n  var sessionCursor = HelpSessions.find({\n    _id: id\n  }); // get the data, make sure the session exists\n\n  var sessionData = HelpSessions.findOne(id);\n\n  if (!sessionData) {\n    return {\n      error: \"Session not found\"\n    };\n  } // get cursors for each user and conversation\n\n\n  var conversationCursor = Conversations.find({\n    _id: sessionData.conversationId\n  });\n  return [sessionCursor, conversationCursor];\n});\nmodule.exportDefault(HelpSessions);","map":{"version":3,"sources":["imports/api/helpSession.js"],"names":["Mongo","module","watch","require","v","Meteor","Random","Conversations","Courses","HelpSessions","Collection","methods","studentId","tutorId","courseId","startDate","endDate","initialMessageText","tutor","users","findOne","_id","student","cost","profile","completedCourses","conversationId","insert","messages","initialMessageTextPrefix","message","text","user","name","createdAt","Date","id","call","tutorAccepted","tutorDenied","tutorStarted","studentStarted","tutorEnded","studentEnded","denyMessage","cancelled","cancelledBy","cancelMessage","sessionId","session","userId","update","$set","system","error","endedAt","startedAt","publish","sessionsCursor","find","$or","fields","sessions","fetch","studentIds","_","pluck","tutorIds","userIds","concat","courseIds","usersCursor","$in","coursesCursor","sessionCursor","sessionData","conversationCursor","exportDefault"],"mappings":"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","file":"imports/api/helpSession.js.map","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\n\nimport Conversations from './conversations';\nimport Courses from \"./courses\";\n\nconst HelpSessions = new Mongo.Collection('helpSessions');\n\nMeteor.methods({\n    // SETTERS\n    'helpSessions.create': ({ studentId, tutorId, courseId, startDate, endDate, initialMessageText }) => {\n        // get cost of this session\n        tutor = Meteor.users.findOne({_id: tutorId})\n        student = Meteor.users.findOne({_id: studentId});\n        cost = tutor.profile.completedCourses[courseId]\n        // make sure cost, tutor and student exist\n        if (!cost || !tutor || !student) {\n            return false\n        }\n        // create new conversation for this session\n        conversationId = Conversations.insert({messages: []})\n        // create initial message\n        const initialMessageTextPrefix = \"Hi! I need help with \"\n        const message = {\n            text: initialMessageTextPrefix + initialMessageText,\n            user: {\n                _id: studentId,\n                name: student.profile.name,\n            },\n            createdAt: new Date(),\n            _id: Random.id(),\n        }\n        // send initial message\n        Meteor.call(\"conversations.sendMessage\", {conversationId, message})\n        // create new help session with link to convo\n        return HelpSessions.insert({ studentId, tutorId, courseId, cost, startDate, endDate, tutorAccepted: false, tutorDenied: false, tutorStarted: false, studentStarted: false, tutorEnded: false, studentEnded: false,  denyMessage: \"\", cancelled: false, cancelledBy: null, cancelMessage: \"\", conversationId: conversationId  });\n    },\n    'helpSessions.accept': ({ sessionId }) => {\n        // find session\n        const session = HelpSessions.findOne(sessionId)\n        const tutor = Meteor.users.findOne({_id: session.tutorId})\n        // make sure this user has authority to accept a session\n        if (session.tutorId == Meteor.userId()) {\n            HelpSessions.update(\n                {_id: sessionId},\n                {$set: {tutorAccepted: true}}\n            )\n\n            // send system message update\n            const message = {\n                _id: Random.id(),\n                text: tutor.profile.name + \" accepted! Figure out where to meet.\",\n                createdAt: new Date(),\n                system: true,\n            }\n            // send system message\n            Meteor.call(\"conversations.sendMessage\", {conversationId: session.conversationId, message})\n\n            return true\n        }\n        return {error: \"You do not have access to this session\"}\n    },\n    'helpSessions.end': ({ sessionId }) => {\n        // find session\n        const session = HelpSessions.findOne(sessionId)\n        if (session.tutorId == Meteor.userId()) {\n            HelpSessions.update(\n                {_id: sessionId},\n                {$set: {tutorEnded: true}}\n            )\n            session.tutorEnded = true\n        } else if (session.studentId == Meteor.userId()){\n            HelpSessions.update(\n                {_id: sessionId},\n                {$set: {studentEnded: true}}\n            )\n        }\n        // if they both ended, add an ended date\n        if (session.studentEnded && session.tutorEnded) {\n            HelpSessions.update(\n                {_id: sessionId},\n                {$set: {endedAt: new Date()}}\n            )\n            session.studentEnded = true\n        }\n    },\n    'helpSessions.start': ({ sessionId }) => {\n        const session = HelpSessions.findOne(sessionId)\n        const userId = Meteor.userId()\n        // make sure session exists\n        if (!session) {\n            return {error: \"Session not found\"}\n        }\n        // if the user is the tutor, set tutorAccepted to true\n        if (session.tutorId == userId) {\n            // edit local document so we can check the values later\n            session.tutorStarted = true\n            HelpSessions.update(\n                sessionId, \n                {$set: {tutorStarted: true}}\n            )\n        }\n        // if the user is the student, set studentAccepted to true\n        if (session.studentId == userId) {\n            // edit local document so we can check the values later\n            session.studentStarted = true\n            HelpSessions.update(\n                sessionId, \n                {$set: {studentStarted: true}}\n            )\n        }\n        // set started at if both have started\n        if (session.tutorStarted && session.studentStarted) {\n            HelpSessions.update(\n                sessionId, \n                {$set: {startedAt: new Date()}}\n            )\n        }\n    }\n});\n\nMeteor.publish('mySessions', function () {\n    var sessionsCursor = HelpSessions.find({$or: [{studentId: Meteor.userId()}, {tutorId: Meteor.userId()}]}, {\n        fields: {_id: 1, courseId: 1, studentId: 1, tutorId: 1, tutorAccepted: 1, tutorDenied: 1, cancelled: 1, startDate: 1, endDate: 1, endedAt: 1, startedAt: 1}\n    })\n    var sessions = sessionsCursor.fetch()\n\n    var studentIds =  _.pluck(sessions,\"studentId\");\n    var tutorIds = _.pluck(sessions,\"tutorId\");\n\n    var userIds = tutorIds.concat(studentIds);\n    var courseIds = _.pluck(sessions, \"courseId\")\n\n    var usersCursor = Meteor.users.find({\n        _id : {$in : userIds}\n    });\n\n    var coursesCursor = Courses.find({_id: {$in : courseIds}})\n\n    return [\n        sessionsCursor,\n        usersCursor,\n        coursesCursor,\n    ];\n});\n\nMeteor.publish('session', function({id}) {\n    // get cursor for this session\n    var sessionCursor = HelpSessions.find({_id: id})\n    // get the data, make sure the session exists\n    var sessionData = HelpSessions.findOne(id)\n    if (!sessionData) {\n        return {error: \"Session not found\"}\n    }\n    // get cursors for each user and conversation\n    var conversationCursor = Conversations.find({_id: sessionData.conversationId})\n\n    return [\n        sessionCursor,\n        conversationCursor,\n    ];\n});\n\nexport default HelpSessions;"]},"hash":"bdf11754bde1a3a0a180d05e80df801cd855d050"}
