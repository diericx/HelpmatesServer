{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"_exploded":{},"_verified":{},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$10","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/api/expo.js","filename":"imports/api/expo.js","sourceMapTarget":"imports/api/expo.js.map","sourceMaps":true,"presets":[],"passPerPreset":false,"envName":"development","cwd":"/Users/Zac/Documents/Code/GitHub/Meteor/helpmates","parserOpts":{"sourceType":"module","sourceFileName":"imports/api/expo.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","classProperties","asyncGenerators"]},"generatorOpts":{"filename":"imports/api/expo.js","comments":true,"compact":false,"sourceMaps":true,"sourceMapTarget":"imports/api/expo.js.map","sourceFileName":"imports/api/expo.js"}},"code":"module.export({\n  SendPushNotification: () => SendPushNotification\n});\nlet Expo;\nmodule.watch(require(\"expo-server-sdk\"), {\n  default(v) {\n    Expo = v;\n  }\n\n}, 0);\n// Create a new Expo SDK client\nlet expo = new Expo();\n\nfunction SendPushNotification(token, title, body) {\n  // if the token doesn't exist, don't send the notification\n  if (!token) {\n    return;\n  }\n\n  let messages = [];\n  messages.push({\n    to: token,\n    sound: 'default',\n    title: title,\n    body: body,\n    data: {\n      withSome: null\n    }\n  });\n  let chunks = expo.chunkPushNotifications(messages);\n\n  (() => Promise.asyncApply(() => {\n    // Send the chunks to the Expo push notification service. There are\n    // different strategies you could use. A simple one is to send one chunk at a\n    // time, which nicely spreads the load out over time:\n    for (let chunk of chunks) {\n      try {\n        let receipts = Promise.await(expo.sendPushNotificationsAsync(chunk));\n        console.log(receipts);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }))();\n}","map":{"version":3,"sources":["imports/api/expo.js"],"names":["module","export","SendPushNotification","Expo","watch","require","default","v","expo","token","title","body","messages","push","to","sound","data","withSome","chunks","chunkPushNotifications","chunk","receipts","sendPushNotificationsAsync","console","log","error"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,wBAAqB,MAAIA;AAA1B,CAAd;AAA+D,IAAIC,IAAJ;AAASH,OAAOI,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAACC,UAAQC,CAAR,EAAU;AAACJ,WAAKI,CAAL;AAAO;;AAAnB,CAAxC,EAA6D,CAA7D;AAExE;AACA,IAAIC,OAAO,IAAIL,IAAJ,EAAX;;AAEO,SAASD,oBAAT,CAA8BO,KAA9B,EAAqCC,KAArC,EAA4CC,IAA5C,EAAkD;AACvD;AACA,MAAI,CAACF,KAAL,EAAY;AACV;AACD;;AAED,MAAIG,WAAW,EAAf;AACAA,WAASC,IAAT,CAAc;AACVC,QAAIL,KADM;AAEVM,WAAO,SAFG;AAGVL,WAAOA,KAHG;AAIVC,UAAMA,IAJI;AAKVK,UAAM;AAAEC,gBAAU;AAAZ;AALI,GAAd;AAOA,MAAIC,SAASV,KAAKW,sBAAL,CAA4BP,QAA5B,CAAb;;AACA,GAAC,+BAAY;AACX;AACA;AACA;AACA,SAAK,IAAIQ,KAAT,IAAkBF,MAAlB,EAA0B;AACxB,UAAI;AACF,YAAIG,yBAAiBb,KAAKc,0BAAL,CAAgCF,KAAhC,CAAjB,CAAJ;AACAG,gBAAQC,GAAR,CAAYH,QAAZ;AACD,OAHD,CAGE,OAAOI,KAAP,EAAc;AACdF,gBAAQE,KAAR,CAAcA,KAAd;AACD;AACF;AACF,GAZA,CAAD;AAaD","file":"imports/api/expo.js.map","sourcesContent":["import Expo from 'expo-server-sdk';\n\n// Create a new Expo SDK client\nlet expo = new Expo();\n\nexport function SendPushNotification(token, title, body) {\n  // if the token doesn't exist, don't send the notification\n  if (!token) {\n    return;\n  }\n  \n  let messages = [];\n  messages.push({\n      to: token,\n      sound: 'default',\n      title: title,\n      body: body,\n      data: { withSome: null },\n  })\n  let chunks = expo.chunkPushNotifications(messages);\n  (async () => {\n    // Send the chunks to the Expo push notification service. There are\n    // different strategies you could use. A simple one is to send one chunk at a\n    // time, which nicely spreads the load out over time:\n    for (let chunk of chunks) {\n      try {\n        let receipts = await expo.sendPushNotificationsAsync(chunk);\n        console.log(receipts);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  })();\n}"]},"hash":"4fb529cda9f340ed1c6018de82848ce376acfd24"}
