{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$6","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$8","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$10","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$12","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$13","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$16","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$17","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$18","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$20","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$21","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$22","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$23","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$24","visitor":{"_exploded":{},"_verified":{},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/api/users.js","filename":"imports/api/users.js","sourceMapTarget":"imports/api/users.js.map","sourceMaps":true,"passPerPreset":false,"envName":"development","cwd":"/Users/Zac/Documents/Code/GitHub/Meteor/helpmates","parserOpts":{"sourceType":"module","sourceFileName":"imports/api/users.js","plugins":["dynamicImport","classProperties","jsx","jsx","flow","asyncGenerators","objectRestSpread","objectRestSpread","flow","asyncGenerators"]},"generatorOpts":{"filename":"imports/api/users.js","comments":true,"compact":false,"sourceMaps":true,"sourceMapTarget":"imports/api/users.js.map","sourceFileName":"imports/api/users.js"}},"code":"var Random;\nmodule.watch(require(\"meteor/random\"), {\n  Random: function (v) {\n    Random = v;\n  }\n}, 0);\nvar Courses;\nmodule.watch(require(\"./courses\"), {\n  \"default\": function (v) {\n    Courses = v;\n  }\n}, 1);\nvar Ratings;\nmodule.watch(require(\"./ratings\"), {\n  \"default\": function (v) {\n    Ratings = v;\n  }\n}, 2);\nvar Conversations;\nmodule.watch(require(\"./conversations\"), {\n  \"default\": function (v) {\n    Conversations = v;\n  }\n}, 3);\nAccounts.onCreateUser(function (options, user) {\n  // create support conversation for this user\n  conversationId = Conversations.insert({\n    messages: []\n  }); // send system message update\n\n  var message = {\n    _id: Random.id(),\n    text: \"Give us feedback!\",\n    createdAt: new Date(),\n    system: true // send system message\n\n  };\n  Meteor.call(\"conversations.sendMessage\", {\n    conversationId: conversationId,\n    message: message\n  }); // add your extra fields here; don't forget to validate the options, if needed\n\n  _.extend(user, {\n    createdAt: new Date(),\n    profile: {\n      name: options.name,\n      supportConversationId: conversationId,\n      profilePic: null,\n      completedCourses: {},\n      rate: 0,\n      availabilities: []\n    }\n  });\n\n  Meteor.call('sendVerificationLink', function (error, response) {\n    if (error) {\n      console.log(\"Error sending verification email.\");\n    }\n  });\n  return user;\n});\nMeteor.methods({\n  // SETTERS\n  'users.setName': function (_ref) {\n    var name = _ref.name;\n    var profile = Meteor.user().profile;\n    profile.name = name;\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        profile: profile\n      }\n    });\n  },\n  'user.setProfilePic': function (_ref2) {\n    var url = _ref2.url;\n    var profile = Meteor.user().profile;\n    profile.profilePic = url;\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        profile: profile\n      }\n    });\n  },\n  'users.addCompletedCourse': function (_ref3) {\n    var courseId = _ref3.courseId,\n        rate = _ref3.rate;\n    // attempt to find user by id\n    var user = Meteor.user();\n    var course = Courses.findOne(courseId); // make sure this user and course exists\n\n    if (!user || !course) {\n      return false;\n    } // update set query\n\n\n    var set = {\n      profile: user.profile\n    };\n    set.profile.completedCourses[courseId] = rate; // update completedCourses array in profile\n\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: set\n    });\n    return true;\n  },\n  'users.removeCompletedCourse': function (_ref4) {\n    var courseId = _ref4.courseId;\n    // update set query\n    var user = Meteor.user();\n    var set = {\n      profile: user.profile\n    };\n    delete set.profile.completedCourses[courseId]; // apply it\n\n    Meteor.users.update(Meteor.userId(), {\n      $set: set\n    });\n  },\n  'users.setRateForCourse': function (_ref5) {\n    var courseId = _ref5.courseId,\n        rate = _ref5.rate;\n    // update set query\n    var user = Meteor.user();\n    var set = {\n      profile: user.profile\n    };\n    set.profile.completedCourses[courseId] = rate; // apply it\n\n    Meteor.users.update(Meteor.userId(), {\n      $set: set\n    });\n  },\n  'users.addAvailability': function (_ref6) {\n    var date = _ref6.date,\n        length = _ref6.length,\n        repeats = _ref6.repeats;\n    var newAvailability = {\n      \"date\": date,\n      \"length\": length,\n      \"repeats\": repeats\n    };\n    Meteor.users.update({\n      _id: Meteor.userId()\n    }, {\n      $addToSet: {\n        \"profile.availabilities\": newAvailability\n      }\n    });\n  },\n  // GETTERS\n  'users.getAvailabilities': function (_ref7) {\n    var userId = _ref7.userId;\n    var user = Meteor.users.findOne(userId);\n\n    if (user) {\n      var profile = user.profile;\n      return user.profile.availabilities;\n    } else {\n      return [];\n    }\n  },\n  'users.getAllWhoCompletedCourse': function (_ref8) {\n    var courseId = _ref8.courseId;\n    var users = Meteor.users.find({\n      \"profile.completedCourses\": {\n        $in: [courseId]\n      }\n    }, {\n      fields: {\n        \"profile\": 1\n      }\n    }).fetch();\n    return users;\n  }\n});\nMeteor.publish('tutors', function () {\n  var tutors = Meteor.users.find({\n    \"profile.completedCourses\": {\n      $ne: []\n    }\n  }, {\n    fields: {\n      profile: 1,\n      _id: 1\n    }\n  }).fetch(); // Get reviews for all these users\n\n  var idsForTutors = tutors.map(function (user) {\n    return user._id;\n  });\n  var ratingsCursor = Ratings.find({\n    targetUserId: {\n      $in: idsForTutors\n    }\n  }); // Get completed courses for all these users\n\n  var idsForCourses = tutors.map(function (user) {\n    return user.completedCourses;\n  });\n  idsForCourses = [].concat.apply([], idsForCourses);\n  var coursesCursor = Courses.find({\n    _id: {\n      $in: idsForCourses\n    }\n  }); // Get ids for users who rated this tutor\n\n  var idsForRaters = ratingsCursor.fetch().map(function (rating) {\n    return rating.userId;\n  }); // combine user Ids\n\n  var userIds = idsForTutors.concat(idsForRaters);\n  var usersCursor = Meteor.users.find({\n    _id: {\n      $in: userIds\n    }\n  });\n  return [usersCursor, ratingsCursor, coursesCursor];\n});","map":{"version":3,"sources":["imports/api/users.js"],"names":["Random","module","watch","require","v","Courses","Ratings","Conversations","Accounts","onCreateUser","options","user","conversationId","insert","messages","message","_id","id","text","createdAt","Date","system","Meteor","call","_","extend","profile","name","supportConversationId","profilePic","completedCourses","rate","availabilities","error","response","console","log","methods","users","update","userId","$set","url","courseId","course","findOne","set","date","length","repeats","newAvailability","$addToSet","find","$in","fields","fetch","publish","tutors","$ne","idsForTutors","map","ratingsCursor","targetUserId","idsForCourses","concat","apply","coursesCursor","idsForRaters","rating","userIds","usersCursor"],"mappings":"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","file":"imports/api/users.js.map","sourcesContent":["import { Random } from 'meteor/random'\n\nimport Courses from \"./courses\";\nimport Ratings from \"./ratings\";\nimport Conversations from \"./conversations\";\n\nAccounts.onCreateUser((options, user) => {\n    // create support conversation for this user\n    conversationId = Conversations.insert({messages: []})\n\n    // send system message update\n    const message = {\n        _id: Random.id(),\n        text: \"Give us feedback!\",\n        createdAt: new Date(),\n        system: true,\n    }\n    // send system message\n    Meteor.call(\"conversations.sendMessage\", {conversationId, message})\n\n    // add your extra fields here; don't forget to validate the options, if needed\n    _.extend(user, {\n        createdAt: new Date(),\n        profile: {\n            name: options.name,\n            supportConversationId: conversationId,\n            profilePic: null,\n            completedCourses: {},\n            rate: 0,\n            availabilities: [],\n        }\n    });\n\n    Meteor.call( 'sendVerificationLink', ( error, response ) => {\n        if ( error ) {\n            console.log(\"Error sending verification email.\")\n        }\n    });\n    \n    return user;\n});\n\nMeteor.methods({\n    // SETTERS\n    'users.setName': ({name}) => {\n        var profile = Meteor.user().profile\n        profile.name = name\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: {profile: profile} }\n        )\n    },\n\n    'user.setProfilePic': ({url}) => {\n        var profile = Meteor.user().profile\n        profile.profilePic = url\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: {profile: profile} }\n        )\n    },\n\n    'users.addCompletedCourse': ({courseId, rate}) => {\n        // attempt to find user by id\n        const user = Meteor.user();\n        const course = Courses.findOne(courseId);\n        // make sure this user and course exists\n        if (!user || !course) {\n            return false;\n        }\n        // update set query\n        var set = {profile: user.profile};\n        set.profile.completedCourses[courseId] = rate;\n        // update completedCourses array in profile\n        Meteor.users.update(\n            {_id: user._id}, \n            { $set: set }\n        )\n        return true;\n    },\n\n    'users.removeCompletedCourse': ({courseId}) => {\n        // update set query\n        const user = Meteor.user();\n        var set = {profile: user.profile};\n        delete set.profile.completedCourses[courseId];\n        // apply it\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: set }\n        )\n    },\n\n    'users.setRateForCourse': ({courseId, rate}) => {\n        // update set query\n        const user = Meteor.user();\n        var set = {profile: user.profile};\n        set.profile.completedCourses[courseId] = rate;\n        // apply it\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: set }\n        )\n    },\n\n    'users.addAvailability': ({date, length, repeats}) => {\n        var newAvailability = {\"date\": date, \"length\": length, \"repeats\": repeats}\n        Meteor.users.update(\n            {_id: Meteor.userId()}, \n            { $addToSet: {\"profile.availabilities\": newAvailability} }\n        )\n    },\n\n    // GETTERS\n    'users.getAvailabilities': ({userId}) => {\n        const user = Meteor.users.findOne(userId)\n        \n        if (user) {\n            const profile = user.profile\n            return user.profile.availabilities\n        } else {\n            return []\n        }\n        \n    },\n\n    'users.getAllWhoCompletedCourse': ({courseId}) => {\n        const users = Meteor.users.find(\n            { \"profile.completedCourses\": { $in: [ courseId ] }},\n            {fields: { \"profile\": 1,} \n        }).fetch();\n\n        return users;\n    },\n})\n\nMeteor.publish('tutors', function () {\n    var tutors = Meteor.users.find(\n        {\"profile.completedCourses\": {$ne: []}},\n        {\n            fields: {\n                profile: 1, _id: 1,\n            }\n        }\n    ).fetch()\n    // Get reviews for all these users\n    var idsForTutors = tutors.map(function(user) { \n        return user._id;\n    }); \n    var ratingsCursor = Ratings.find({ targetUserId: { $in: idsForTutors } });\n    // Get completed courses for all these users\n    var idsForCourses = tutors.map(function(user) { \n        return user.completedCourses;\n    })\n    idsForCourses = [].concat.apply([], idsForCourses);\n    var coursesCursor = Courses.find({ _id: { $in: idsForCourses } });\n\n    // Get ids for users who rated this tutor\n    var idsForRaters = ratingsCursor.fetch().map(function(rating) { \n        return rating.userId;\n    }); \n    // combine user Ids\n    let userIds = idsForTutors.concat(idsForRaters);\n    var usersCursor = Meteor.users.find({_id: { $in: userIds } });\n    return [\n        usersCursor,\n        ratingsCursor,\n        coursesCursor\n    ]\n});"]},"hash":"1bd66b7717ae214e336c1fb30c0d1cb7568eaab0"}
