{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"_exploded":{},"_verified":{},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$10","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/api/users.js","filename":"imports/api/users.js","sourceMapTarget":"imports/api/users.js.map","sourceMaps":true,"presets":[],"passPerPreset":false,"envName":"development","cwd":"/Users/Zac/Documents/Code/GitHub/Meteor/helpmates","parserOpts":{"sourceType":"module","sourceFileName":"imports/api/users.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","classProperties","asyncGenerators"]},"generatorOpts":{"filename":"imports/api/users.js","comments":true,"compact":false,"sourceMaps":true,"sourceMapTarget":"imports/api/users.js.map","sourceFileName":"imports/api/users.js"}},"code":"let Courses;\nmodule.watch(require(\"./courses\"), {\n  default(v) {\n    Courses = v;\n  }\n\n}, 0);\nlet Ratings;\nmodule.watch(require(\"./ratings\"), {\n  default(v) {\n    Ratings = v;\n  }\n\n}, 1);\nAccounts.onCreateUser((options, user) => {\n  // add your extra fields here; don't forget to validate the options, if needed\n  _.extend(user, {\n    createdAt: new Date(),\n    profile: {\n      name: options.name,\n      profilePic: null,\n      completedCourses: {},\n      rate: 0,\n      availabilities: []\n    }\n  });\n\n  return user;\n});\nMeteor.methods({\n  // SETTERS\n  'users.setName': ({\n    name\n  }) => {\n    var profile = Meteor.user().profile;\n    profile.name = name;\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        profile: profile\n      }\n    });\n  },\n  'user.setProfilePic': ({\n    url\n  }) => {\n    FS.Utility.eachFile(event, function (url) {\n      var profile = Meteor.user().profile;\n      profile.profilePic = url;\n      Meteor.users.update(Meteor.userId(), {\n        $set: {\n          profile: profile\n        }\n      });\n    });\n  },\n  'users.addCompletedCourse': ({\n    courseId,\n    rate\n  }) => {\n    // attempt to find user by id\n    const user = Meteor.user();\n    const course = Courses.findOne(courseId); // make sure this user and course exists\n\n    if (!user || !course) {\n      return false;\n    } // update set query\n\n\n    var set = {\n      profile: user.profile\n    };\n    set.profile.completedCourses[courseId] = rate; // update completedCourses array in profile\n\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: set\n    });\n    return true;\n  },\n  'users.removeCompletedCourse': ({\n    courseId\n  }) => {\n    // update set query\n    const user = Meteor.user();\n    var set = {\n      profile: user.profile\n    };\n    delete set.profile.completedCourses[courseId]; // apply it\n\n    Meteor.users.update(Meteor.userId(), {\n      $set: set\n    });\n  },\n  'users.setRateForCourse': ({\n    courseId,\n    rate\n  }) => {\n    // update set query\n    const user = Meteor.user();\n    var set = {\n      profile: user.profile\n    };\n    set.profile.completedCourses[courseId] = rate; // apply it\n\n    Meteor.users.update(Meteor.userId(), {\n      $set: set\n    });\n  },\n  'users.addAvailability': ({\n    date,\n    length,\n    repeats\n  }) => {\n    var newAvailability = {\n      \"date\": date,\n      \"length\": length,\n      \"repeats\": repeats\n    };\n    console.log(newAvailability);\n    Meteor.users.update({\n      _id: Meteor.userId()\n    }, {\n      $addToSet: {\n        \"profile.availabilities\": newAvailability\n      }\n    });\n  },\n  // GETTERS\n  'users.getAvailabilities': ({\n    userId\n  }) => {\n    const user = Meteor.users.findOne(userId);\n\n    if (user) {\n      const profile = user.profile;\n      return user.profile.availabilities;\n    } else {\n      return [];\n    }\n  },\n  'users.getAllWhoCompletedCourse': ({\n    courseId\n  }) => {\n    const users = Meteor.users.find({\n      \"profile.completedCourses\": {\n        $in: [courseId]\n      }\n    }, {\n      fields: {\n        \"profile\": 1\n      }\n    }).fetch();\n    return users;\n  }\n});\nMeteor.publish('tutors', function () {\n  var tutorsCursor = Meteor.users.find({\n    \"profile.completedCourses\": {\n      $ne: []\n    }\n  }, {\n    fields: {\n      profile: 1,\n      _id: 1\n    }\n  }); // Get reviews for all these users\n\n  var idsForUsers = tutorsCursor.fetch().map(function (user) {\n    return user._id;\n  }); // Gets an array of all Room IDs for the user.\n\n  var ratingsCursor = Ratings.find({\n    targetUserId: {\n      $in: idsForUsers\n    }\n  });\n  return [tutorsCursor, ratingsCursor];\n});","map":{"version":3,"sources":["imports/api/users.js"],"names":["Courses","module","watch","require","default","v","Ratings","Accounts","onCreateUser","options","user","_","extend","createdAt","Date","profile","name","profilePic","completedCourses","rate","availabilities","Meteor","methods","users","update","userId","$set","url","FS","Utility","eachFile","event","courseId","course","findOne","set","_id","date","length","repeats","newAvailability","console","log","$addToSet","find","$in","fields","fetch","publish","tutorsCursor","$ne","idsForUsers","map","ratingsCursor","targetUserId"],"mappings":"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","file":"imports/api/users.js.map","sourcesContent":["import Courses from \"./courses\";\nimport Ratings from \"./ratings\";\n\nAccounts.onCreateUser((options, user) => {\n    // add your extra fields here; don't forget to validate the options, if needed\n    _.extend(user, {\n        createdAt: new Date(),\n        profile: {\n            name: options.name,\n            profilePic: null,\n            completedCourses: {},\n            rate: 0,\n            availabilities: [],\n        }\n    });\n    \n    return user;\n});\n\nMeteor.methods({\n    // SETTERS\n    'users.setName': ({name}) => {\n        var profile = Meteor.user().profile\n        profile.name = name\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: {profile: profile} }\n        )\n    },\n\n    'user.setProfilePic': ({url}) => {\n        FS.Utility.eachFile(event, function(url) {\n            var profile = Meteor.user().profile\n            profile.profilePic = url\n            Meteor.users.update(\n                Meteor.userId(), \n                { $set: {profile: profile} }\n            )\n        });\n    },\n\n    'users.addCompletedCourse': ({courseId, rate}) => {\n        // attempt to find user by id\n        const user = Meteor.user();\n        const course = Courses.findOne(courseId);\n        // make sure this user and course exists\n        if (!user || !course) {\n            return false;\n        }\n        // update set query\n        var set = {profile: user.profile};\n        set.profile.completedCourses[courseId] = rate;\n        // update completedCourses array in profile\n        Meteor.users.update(\n            {_id: user._id}, \n            { $set: set }\n        )\n        return true;\n    },\n\n    'users.removeCompletedCourse': ({courseId}) => {\n        // update set query\n        const user = Meteor.user();\n        var set = {profile: user.profile};\n        delete set.profile.completedCourses[courseId];\n        // apply it\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: set }\n        )\n    },\n\n    'users.setRateForCourse': ({courseId, rate}) => {\n        // update set query\n        const user = Meteor.user();\n        var set = {profile: user.profile};\n        set.profile.completedCourses[courseId] = rate;\n        // apply it\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: set }\n        )\n    },\n\n    'users.addAvailability': ({date, length, repeats}) => {\n        var newAvailability = {\"date\": date, \"length\": length, \"repeats\": repeats}\n        console.log(newAvailability)\n        Meteor.users.update(\n            {_id: Meteor.userId()}, \n            { $addToSet: {\"profile.availabilities\": newAvailability} }\n        )\n    },\n\n    // GETTERS\n    'users.getAvailabilities': ({userId}) => {\n        const user = Meteor.users.findOne(userId)\n        \n        if (user) {\n            const profile = user.profile\n            return user.profile.availabilities\n        } else {\n            return []\n        }\n        \n    },\n\n    'users.getAllWhoCompletedCourse': ({courseId}) => {\n        const users = Meteor.users.find(\n            { \"profile.completedCourses\": { $in: [ courseId ] }},\n            {fields: { \"profile\": 1,} \n        }).fetch();\n\n        return users;\n    },\n})\n\nMeteor.publish('tutors', function () {\n    var tutorsCursor = Meteor.users.find(\n        {\"profile.completedCourses\": {$ne: []}},\n        {\n            fields: {\n                profile: 1, _id: 1,\n            }\n        }\n    )\n    // Get reviews for all these users\n    var idsForUsers = tutorsCursor.fetch().map(function(user) { \n        return user._id;\n    });  // Gets an array of all Room IDs for the user.\n    var ratingsCursor = Ratings.find({ targetUserId: { $in: idsForUsers } });\n\n    return [\n        tutorsCursor,\n        ratingsCursor\n    ]\n});"]},"hash":"7f1943363835298c4a43296d30bc28fa47c736c1"}
