{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"_exploded":{},"_verified":{},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$10","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"imports/api/users.js","filename":"imports/api/users.js","sourceMapTarget":"imports/api/users.js.map","sourceMaps":true,"presets":[],"passPerPreset":false,"envName":"development","cwd":"/Users/Zac/Documents/Code/GitHub/Meteor/helpmates","parserOpts":{"sourceType":"module","sourceFileName":"imports/api/users.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","classProperties","asyncGenerators"]},"generatorOpts":{"filename":"imports/api/users.js","comments":true,"compact":false,"sourceMaps":true,"sourceMapTarget":"imports/api/users.js.map","sourceFileName":"imports/api/users.js"}},"code":"let Random;\nmodule.watch(require(\"meteor/random\"), {\n  Random(v) {\n    Random = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Courses;\nmodule.watch(require(\"./courses\"), {\n  default(v) {\n    Courses = v;\n  }\n\n}, 2);\nlet Ratings;\nmodule.watch(require(\"./ratings\"), {\n  default(v) {\n    Ratings = v;\n  }\n\n}, 3);\nAccounts.onCreateUser((options, user) => {\n  // send system message update\n  const message = {\n    _id: Random.id(),\n    text: \"Give us feedback!\",\n    createdAt: new Date(),\n    system: true // add your extra fields here; don't forget to validate the options, if needed\n\n  };\n\n  _.extend(user, {\n    createdAt: new Date(),\n    profile: {\n      name: options.name,\n      completedCourses: {},\n      rate: 0,\n      availabilities: [[], [], [], [], [], [], []] // availabilities for each day\n\n    },\n    messages: [message]\n  });\n\n  Meteor.call('sendVerificationLink', (error, response) => {\n    if (error) {\n      console.log(\"Error sending verification email.\");\n    }\n  });\n  return user;\n});\nMeteor.methods({\n  sendVerificationLink() {\n    let userId = Meteor.userId();\n\n    if (userId) {\n      return Accounts.sendVerificationEmail(userId);\n    }\n  },\n\n  // SETTERS\n  'users.setName': ({\n    name\n  }) => {\n    var profile = Meteor.user().profile;\n    profile.name = name;\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        profile: profile\n      }\n    });\n  },\n  'user.setProfilePic': ({\n    url\n  }) => {\n    var profile = Meteor.user().profile;\n    profile.profilePic = url;\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        profile: profile\n      }\n    });\n  },\n  'user.setPushNotificationToken': ({\n    token,\n    userId\n  }) => {\n    const user = Meteor.users.findOne({\n      _id: userId\n    });\n    var profile = user.profile;\n    profile.pushNotificationToken = token;\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        profile: profile\n      }\n    });\n  },\n  'users.addCompletedCourse': ({\n    courseId,\n    rate\n  }) => {\n    // attempt to find user by id\n    const user = Meteor.user();\n    const course = Courses.findOne(courseId); // make sure this user and course exists\n\n    if (!user || !course) {\n      return false;\n    } // update set query\n\n\n    var set = {\n      profile: user.profile\n    };\n    set.profile.completedCourses[courseId] = rate; // update completedCourses array in profile\n\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: set\n    });\n    return true;\n  },\n  'users.removeCompletedCourse': ({\n    courseId\n  }) => {\n    // update set query\n    const user = Meteor.user();\n    var set = {\n      profile: user.profile\n    };\n    delete set.profile.completedCourses[courseId]; // apply it\n\n    Meteor.users.update(Meteor.userId(), {\n      $set: set\n    });\n  },\n  'users.setRateForCourse': ({\n    courseId,\n    rate\n  }) => {\n    // update set query\n    const user = Meteor.user();\n    var set = {\n      profile: user.profile\n    };\n    set.profile.completedCourses[courseId] = rate; // apply it\n\n    Meteor.users.update(Meteor.userId(), {\n      $set: set\n    });\n  },\n  'users.addAvailability': ({\n    dayOfWeek,\n    hours,\n    minutes,\n    duration\n  }) => {\n    const newAvailability = {\n      hours,\n      minutes,\n      duration\n    };\n    const availabilitiesPath = `profile.availabilities[${dayOfWeek}]`;\n    Meteor.users.update({\n      _id: Meteor.userId()\n    }, {\n      $addToSet: {\n        availabilitiesPath: newAvailability\n      }\n    });\n  },\n  // GETTERS\n  'users.getAvailabilities': ({\n    userId\n  }) => {\n    const user = Meteor.users.findOne(userId);\n\n    if (user) {\n      const profile = user.profile;\n      return user.profile.availabilities;\n    } else {\n      return [];\n    }\n  },\n  'users.getAllWhoCompletedCourse': ({\n    courseId\n  }) => {\n    const users = Meteor.users.find({\n      \"profile.completedCourses\": {\n        $in: [courseId]\n      }\n    }, {\n      fields: {\n        \"profile\": 1\n      }\n    }).fetch();\n    return users;\n  }\n});\nMeteor.publish('tutors', function () {\n  var tutors = Meteor.users.find({\n    \"profile.completedCourses\": {\n      $ne: []\n    }\n  }, {\n    fields: {\n      profile: 1,\n      _id: 1\n    }\n  }).fetch(); // Get reviews for all these users\n\n  var idsForTutors = tutors.map(function (user) {\n    return user._id;\n  });\n  var ratingsCursor = Ratings.find({\n    targetUserId: {\n      $in: idsForTutors\n    }\n  }); // Get completed courses for all these users\n\n  var idsForCourses = tutors.map(function (user) {\n    return user.completedCourses;\n  });\n  idsForCourses = [].concat.apply([], idsForCourses);\n  var coursesCursor = Courses.find({\n    _id: {\n      $in: idsForCourses\n    }\n  }); // Get ids for users who rated this tutor\n\n  var idsForRaters = ratingsCursor.fetch().map(function (rating) {\n    return rating.userId;\n  }); // combine user Ids\n\n  let userIds = idsForTutors.concat(idsForRaters);\n  var usersCursor = Meteor.users.find({\n    _id: {\n      $in: userIds\n    }\n  });\n  return [usersCursor, ratingsCursor, coursesCursor];\n});","map":{"version":3,"sources":["imports/api/users.js"],"names":["Random","module","watch","require","v","Meteor","Courses","default","Ratings","Accounts","onCreateUser","options","user","message","_id","id","text","createdAt","Date","system","_","extend","profile","name","completedCourses","rate","availabilities","messages","call","error","response","console","log","methods","sendVerificationLink","userId","sendVerificationEmail","users","update","$set","url","profilePic","token","findOne","pushNotificationToken","courseId","course","set","dayOfWeek","hours","minutes","duration","newAvailability","availabilitiesPath","$addToSet","find","$in","fields","fetch","publish","tutors","$ne","idsForTutors","map","ratingsCursor","targetUserId","idsForCourses","concat","apply","coursesCursor","idsForRaters","rating","userIds","usersCursor"],"mappings":"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","file":"imports/api/users.js.map","sourcesContent":["import { Random } from 'meteor/random'\nimport { Meteor } from 'meteor/meteor';\nimport Courses from \"./courses\";\nimport Ratings from \"./ratings\";\n\nAccounts.onCreateUser((options, user) => {\n    // send system message update\n    const message = {\n        _id: Random.id(),\n        text: \"Give us feedback!\",\n        createdAt: new Date(),\n        system: true,\n    }\n    // add your extra fields here; don't forget to validate the options, if needed\n    _.extend(user, {\n        createdAt: new Date(),\n        profile: {\n            name: options.name,\n            completedCourses: {},\n            rate: 0,\n            availabilities: [[],[],[],[],[],[],[]], // availabilities for each day\n        },\n        messages: [message],\n    });\n\n    Meteor.call( 'sendVerificationLink', ( error, response ) => {\n        if ( error ) {\n            console.log(\"Error sending verification email.\")\n        }\n    });\n    \n    return user;\n});\n\nMeteor.methods({\n    sendVerificationLink() {\n        let userId = Meteor.userId();\n        if ( userId ) {\n            return Accounts.sendVerificationEmail( userId );\n        }\n    },\n    // SETTERS\n    'users.setName': ({name}) => {\n        var profile = Meteor.user().profile\n        \n        profile.name = name\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: {profile: profile} }\n        )\n    },\n\n    'user.setProfilePic': ({url}) => {\n        var profile = Meteor.user().profile\n        profile.profilePic = url\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: {profile: profile} }\n        )\n    },\n\n    'user.setPushNotificationToken': ({token, userId}) => {\n        const user = Meteor.users.findOne({_id: userId})\n        var profile = user.profile\n        profile.pushNotificationToken = token\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: {profile: profile} }\n        )\n    },\n\n    'users.addCompletedCourse': ({courseId, rate}) => {\n        // attempt to find user by id\n        const user = Meteor.user();\n        const course = Courses.findOne(courseId);\n        // make sure this user and course exists\n        if (!user || !course) {\n            return false;\n        }\n        // update set query\n        var set = {profile: user.profile};\n        set.profile.completedCourses[courseId] = rate;\n        // update completedCourses array in profile\n        Meteor.users.update(\n            {_id: user._id}, \n            { $set: set }\n        )\n        return true;\n    },\n\n    'users.removeCompletedCourse': ({courseId}) => {\n        // update set query\n        const user = Meteor.user();\n        var set = {profile: user.profile};\n        delete set.profile.completedCourses[courseId];\n        // apply it\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: set }\n        )\n    },\n\n    'users.setRateForCourse': ({courseId, rate}) => {\n        // update set query\n        const user = Meteor.user();\n        var set = {profile: user.profile};\n        set.profile.completedCourses[courseId] = rate;\n        // apply it\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: set }\n        )\n    },\n\n    'users.addAvailability': ({dayOfWeek, hours, minutes, duration}) => {\n        const newAvailability = {hours, minutes, duration}\n        const availabilitiesPath = `profile.availabilities[${dayOfWeek}]`\n        Meteor.users.update(\n            {_id: Meteor.userId()}, \n            { $addToSet: {availabilitiesPath: newAvailability} }\n        )\n    },\n\n    // GETTERS\n    'users.getAvailabilities': ({userId}) => {\n        const user = Meteor.users.findOne(userId)\n        \n        if (user) {\n            const profile = user.profile\n            return user.profile.availabilities\n        } else {\n            return []\n        }\n        \n    },\n\n    'users.getAllWhoCompletedCourse': ({courseId}) => {\n        const users = Meteor.users.find(\n            { \"profile.completedCourses\": { $in: [ courseId ] }},\n            {fields: { \"profile\": 1,} \n        }).fetch();\n\n        return users;\n    },\n})\n\nMeteor.publish('tutors', function () {\n    var tutors = Meteor.users.find(\n        {\"profile.completedCourses\": {$ne: []}},\n        {\n            fields: {\n                profile: 1, _id: 1,\n            }\n        }\n    ).fetch()\n    // Get reviews for all these users\n    var idsForTutors = tutors.map(function(user) { \n        return user._id;\n    }); \n    var ratingsCursor = Ratings.find({ targetUserId: { $in: idsForTutors } });\n    // Get completed courses for all these users\n    var idsForCourses = tutors.map(function(user) { \n        return user.completedCourses;\n    })\n    idsForCourses = [].concat.apply([], idsForCourses);\n    var coursesCursor = Courses.find({ _id: { $in: idsForCourses } });\n\n    // Get ids for users who rated this tutor\n    var idsForRaters = ratingsCursor.fetch().map(function(rating) { \n        return rating.userId;\n    }); \n    // combine user Ids\n    let userIds = idsForTutors.concat(idsForRaters);\n    var usersCursor = Meteor.users.find({_id: { $in: userIds } });\n    return [\n        usersCursor,\n        ratingsCursor,\n        coursesCursor\n    ]\n});"]},"hash":"d14217bf2b8bf70d09b637691ff94591ce5b8552"}
