[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nlodash = Package['erasaur:meteor-lodash'].lodash;\n_ = Package.underscore._;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nFS = Package['cfs:base-package'].FS;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"conversations.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// imports/api/conversations.js                                                             //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nconst Conversations = new Mongo.Collection('conversations');\nMeteor.methods({\n  'conversations.sendMessage': ({\n    conversationId,\n    message\n  }) => {\n    // const convo = Conversations.findOne(conversationId);\n    Conversations.update({\n      _id: conversationId\n    }, {\n      $push: {\n        messages: message\n      }\n    }); // return Courses.insert({ universityId, title1, title2, subject });\n  }\n});\nmodule.exportDefault(Conversations);\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"courses.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// imports/api/courses.js                                                                   //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Universities;\nmodule.watch(require(\"./universities\"), {\n  default(v) {\n    Universities = v;\n  }\n\n}, 2);\nlet Conversations;\nmodule.watch(require(\"./conversations\"), {\n  default(v) {\n    Conversations = v;\n  }\n\n}, 3);\nconst Courses = new Mongo.Collection('courses');\nMeteor.methods({\n  'courses.addOne': ({\n    universityId,\n    title1,\n    title2,\n    subject\n  }) => {\n    const uni = Universities.findOne(universityId);\n\n    if (uni == null) {\n      throw new Meteor.Error('courses.addOne.notFound', 'University by that ID not found');\n    } // create new conversation\n\n\n    conversationId = Conversations.insert({\n      messages: []\n    });\n    return Courses.insert({\n      universityId,\n      title1,\n      title2,\n      subject,\n      conversationId\n    });\n  },\n  'courses.getAllForUni': ({\n    universityId\n  }) => {\n    const uni = Universities.findOne(universityId);\n\n    if (uni == null) {\n      throw new Meteor.Error('courses.addOne.notFound', 'University by that ID not found');\n    }\n\n    return Courses.find({\n      universityId: universityId\n    }).fetch();\n  }\n});\nMeteor.publish('courses', function () {\n  return Courses.find({});\n});\nMeteor.publish('courseChat', function ({\n  id\n}) {\n  // get course data\n  var course = Courses.findOne({\n    _id: id\n  });\n  return Conversations.find({\n    _id: course.conversationId\n  });\n});\nmodule.exportDefault(Courses);\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"helpSession.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// imports/api/helpSession.js                                                               //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Conversations;\nmodule.watch(require(\"./conversations\"), {\n  default(v) {\n    Conversations = v;\n  }\n\n}, 2);\nlet Courses;\nmodule.watch(require(\"./courses\"), {\n  default(v) {\n    Courses = v;\n  }\n\n}, 3);\nconst HelpSessions = new Mongo.Collection('helpSessions');\nMeteor.methods({\n  // SETTERS\n  'helpSessions.create': ({\n    studentId,\n    tutorId,\n    courseId,\n    startDate,\n    endDate\n  }) => {\n    // create new conversation\n    conversationId = Conversations.insert({\n      messages: []\n    }); // create new help session with link to convo\n\n    return HelpSessions.insert({\n      studentId,\n      tutorId,\n      courseId,\n      startDate,\n      endDate,\n      tutorAccepted: false,\n      tutorDenied: false,\n      tutorStarted: false,\n      studentStarted: false,\n      denyMessage: \"\",\n      cancelled: false,\n      cancelledBy: null,\n      cancelMessage: \"\",\n      conversationId: conversationId\n    });\n  },\n  'helpSessions.accept': ({\n    sessionId\n  }) => {\n    // find session\n    const session = HelpSessions.findOne(sessionId);\n\n    if (session.tutorId == Meteor.userId()) {\n      HelpSessions.update({\n        _id: sessionId\n      }, {\n        $set: {\n          tutorAccepted: true\n        }\n      });\n      return true;\n    }\n\n    return {\n      error: \"You do not have access to this session\"\n    };\n  },\n  'helpSessions.start': ({\n    sessionId\n  }) => {\n    const session = HelpSessions.findOne(sessionId);\n    const userId = Meteor.userId(); // make sure session exists\n\n    if (!session) {\n      return {\n        error: \"Session not found\"\n      };\n    } // if the user is the tutor, set tutorAccepted to true\n\n\n    if (session.tutorId == userId) {\n      // edit local document so we can check the values later\n      session.tutorStarted = true;\n      HelpSessions.update(sessionId, {\n        $set: {\n          tutorStarted: true\n        }\n      });\n    } // if the user is the student, set studentAccepted to true\n\n\n    if (session.studentId == userId) {\n      // edit local document so we can check the values later\n      session.studentStarted = true;\n      HelpSessions.update(sessionId, {\n        $set: {\n          studentStarted: true\n        }\n      });\n    } // set started at if both have started\n\n\n    if (session.tutorStarted && session.studentStarted) {\n      HelpSessions.update(sessionId, {\n        $set: {\n          startedAt: new Date()\n        }\n      });\n    }\n  }\n});\nMeteor.publish('mySessions', function () {\n  console.log(\"Publish my sessions\");\n  var sessionsCursor = HelpSessions.find({\n    $or: [{\n      studentId: Meteor.userId()\n    }, {\n      tutorId: Meteor.userId()\n    }]\n  }, {\n    fields: {\n      _id: 1,\n      courseId: 1,\n      studentId: 1,\n      tutorId: 1,\n      tutorAccepted: 1,\n      tutorDenied: 1,\n      cancelled: 1\n    }\n  });\n  var sessions = sessionsCursor.fetch();\n\n  var studentIds = _.pluck(sessions, \"studentId\");\n\n  var tutorIds = _.pluck(sessions, \"tutorId\");\n\n  var userIds = tutorIds.concat(studentIds);\n\n  var courseIds = _.pluck(sessions, \"courseId\");\n\n  var usersCursor = Meteor.users.find({\n    _id: {\n      $in: userIds\n    }\n  });\n  var coursesCursor = Courses.find({\n    _id: {\n      $in: courseIds\n    }\n  });\n  return [sessionsCursor, usersCursor, coursesCursor];\n});\nMeteor.publish('session', function ({\n  id\n}) {\n  // get cursor for this session\n  var sessionCursor = HelpSessions.find({\n    _id: id\n  }); // get the data, make sure the session exists\n\n  var sessionData = HelpSessions.findOne(id);\n\n  if (!sessionData) {\n    return {\n      error: \"Session not found\"\n    };\n  } // get cursors for each user and conversation\n\n\n  var conversationCursor = Conversations.find({\n    _id: sessionData.conversationId\n  });\n  return [sessionCursor, conversationCursor];\n});\nmodule.exportDefault(HelpSessions);\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"images.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// imports/api/images.js                                                                    //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nImages = new FS.Collection(\"images\", {\n  stores: [new FS.Store.FileSystem(\"images\", {\n    path: \"~/uploads\"\n  })]\n});\nImages.allow({\n  'insert': function () {\n    // add custom authentication code here\n    return true;\n  }\n});\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"universities.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// imports/api/universities.js                                                              //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nconst Universities = new Mongo.Collection('universities');\nMeteor.methods({\n  'universities.addOne': ({\n    name,\n    abbreviation,\n    state,\n    city\n  }) => {\n    return Universities.insert({\n      name,\n      abbreviation,\n      state,\n      city\n    });\n  }\n});\nmodule.exportDefault(Universities);\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"users.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// imports/api/users.js                                                                     //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nthrow new Error(\"Unexpected token, expected \\\",\\\" (97:8)\");\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// server/main.js                                                                           //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.watch(require(\"../imports/api/courses\"));\nmodule.watch(require(\"../imports/api/universities\"));\nmodule.watch(require(\"../imports/api/users\"));\nmodule.watch(require(\"../imports/api/helpSession\"));\nmodule.watch(require(\"../imports/api/conversations\"));\nmodule.watch(require(\"../imports/api/images\"));\nMeteor.startup(() => {// code to run on server at startup\n});\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/conversations.js","imports/api/courses.js","imports/api/helpSession.js","imports/api/images.js","imports/api/universities.js","server/main.js"],"names":["Mongo","module","watch","require","v","Meteor","Conversations","Collection","methods","conversationId","message","update","_id","$push","messages","exportDefault","Universities","default","Courses","universityId","title1","title2","subject","uni","findOne","Error","insert","find","fetch","publish","id","course","HelpSessions","studentId","tutorId","courseId","startDate","endDate","tutorAccepted","tutorDenied","tutorStarted","studentStarted","denyMessage","cancelled","cancelledBy","cancelMessage","sessionId","session","userId","$set","error","startedAt","Date","console","log","sessionsCursor","$or","fields","sessions","studentIds","_","pluck","tutorIds","userIds","concat","courseIds","usersCursor","users","$in","coursesCursor","sessionCursor","sessionData","conversationCursor","Images","FS","stores","Store","FileSystem","path","allow","name","abbreviation","state","city","startup"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\n\nconst Conversations = new Mongo.Collection('conversations');\n\nMeteor.methods({\n    'conversations.sendMessage': ({ conversationId, message }) => {\n        // const convo = Conversations.findOne(conversationId);\n        Conversations.update(\n            {_id: conversationId},\n            {$push: { messages: message }}\n        )\n\n        // return Courses.insert({ universityId, title1, title2, subject });\n    },\n});\n\nexport default Conversations;","import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\nimport Universities from './universities';\nimport Conversations from './conversations';\n\nconst Courses = new Mongo.Collection('courses');\n\nMeteor.methods({\n    'courses.addOne': ({ universityId, title1, title2, subject }) => {\n        const uni = Universities.findOne(universityId);\n\n        if (uni == null) {\n            throw new Meteor.Error('courses.addOne.notFound',\n            'University by that ID not found');\n        }\n\n        // create new conversation\n        conversationId = Conversations.insert({messages: []})\n\n        return Courses.insert({ universityId, title1, title2, subject, conversationId });\n    },\n    \n    'courses.getAllForUni': ({universityId}) => {\n        const uni = Universities.findOne(universityId);\n\n        if (uni == null) {\n            throw new Meteor.Error('courses.addOne.notFound',\n            'University by that ID not found');\n        }\n\n        return Courses.find({universityId: universityId}).fetch();\n    },\n})\n\nMeteor.publish('courses', function () {\n    return Courses.find({})\n});\n\nMeteor.publish('courseChat', function({id}) {\n    // get course data\n    var course = Courses.findOne({_id: id})\n    return Conversations.find({_id: course.conversationId})\n});\n\nexport default Courses;\n\n// Meteor.call('courses.addOne', 'bJ2ppiHYrMFRThfWE', 'Intro to Computer Science I', 'COMP 1671', 'Computer Science')\n","import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\n\nimport Conversations from './conversations';\nimport Courses from \"./courses\";\n\nconst HelpSessions = new Mongo.Collection('helpSessions');\n\nMeteor.methods({\n    // SETTERS\n    'helpSessions.create': ({ studentId, tutorId, courseId, startDate, endDate }) => {\n        // create new conversation\n        conversationId = Conversations.insert({messages: []})\n        // create new help session with link to convo\n        return HelpSessions.insert({ studentId, tutorId, courseId, startDate, endDate, tutorAccepted: false, tutorDenied: false, tutorStarted: false, studentStarted: false,  denyMessage: \"\", cancelled: false, cancelledBy: null, cancelMessage: \"\", conversationId: conversationId  });\n    },\n    'helpSessions.accept': ({ sessionId }) => {\n        // find session\n        const session = HelpSessions.findOne(sessionId)\n        if (session.tutorId == Meteor.userId()) {\n            HelpSessions.update(\n                {_id: sessionId},\n                {$set: {tutorAccepted: true}}\n            )\n            return true\n        }\n        return {error: \"You do not have access to this session\"}\n    },\n    'helpSessions.start': ({ sessionId }) => {\n        const session = HelpSessions.findOne(sessionId)\n        const userId = Meteor.userId()\n        // make sure session exists\n        if (!session) {\n            return {error: \"Session not found\"}\n        }\n        // if the user is the tutor, set tutorAccepted to true\n        if (session.tutorId == userId) {\n            // edit local document so we can check the values later\n            session.tutorStarted = true\n            HelpSessions.update(\n                sessionId, \n                {$set: {tutorStarted: true}}\n            )\n        }\n        // if the user is the student, set studentAccepted to true\n        if (session.studentId == userId) {\n            // edit local document so we can check the values later\n            session.studentStarted = true\n            HelpSessions.update(\n                sessionId, \n                {$set: {studentStarted: true}}\n            )\n        }\n        // set started at if both have started\n        if (session.tutorStarted && session.studentStarted) {\n            HelpSessions.update(\n                sessionId, \n                {$set: {startedAt: new Date()}}\n            )\n        }\n    }\n});\n\nMeteor.publish('mySessions', function () {\n    console.log(\"Publish my sessions\");\n    var sessionsCursor = HelpSessions.find({$or: [{studentId: Meteor.userId()}, {tutorId: Meteor.userId()}]}, {\n        fields: {_id: 1, courseId: 1, studentId: 1, tutorId: 1, tutorAccepted: 1, tutorDenied: 1, cancelled: 1}\n    })\n    var sessions = sessionsCursor.fetch()\n\n    var studentIds =  _.pluck(sessions,\"studentId\");\n    var tutorIds = _.pluck(sessions,\"tutorId\");\n\n    var userIds = tutorIds.concat(studentIds);\n    var courseIds = _.pluck(sessions, \"courseId\")\n\n    var usersCursor = Meteor.users.find({\n        _id : {$in : userIds}\n    });\n\n    var coursesCursor = Courses.find({_id: {$in : courseIds}})\n\n    return [\n        sessionsCursor,\n        usersCursor,\n        coursesCursor,\n    ];\n});\n\nMeteor.publish('session', function({id}) {\n    // get cursor for this session\n    var sessionCursor = HelpSessions.find({_id: id})\n    // get the data, make sure the session exists\n    var sessionData = HelpSessions.findOne(id)\n    if (!sessionData) {\n        return {error: \"Session not found\"}\n    }\n    // get cursors for each user and conversation\n    var conversationCursor = Conversations.find({_id: sessionData.conversationId})\n\n    return [\n        sessionCursor,\n        conversationCursor,\n    ];\n});\n\nexport default HelpSessions;","Images = new FS.Collection(\"images\", {\n    stores: [new FS.Store.FileSystem(\"images\", {path: \"~/uploads\"})]\n});\n\nImages.allow({\n    'insert': function () {\n        // add custom authentication code here\n        return true;\n    }\n});","import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\n\nconst Universities = new Mongo.Collection('universities');\n\nMeteor.methods({\n    'universities.addOne': ({ name, abbreviation, state, city }) => {\n        return Universities.insert({ name, abbreviation, state, city });\n    },\n})\n\nexport default Universities;\n","import { Meteor } from 'meteor/meteor';\nimport '../imports/api/courses';\nimport '../imports/api/universities';\nimport '../imports/api/users';\nimport '../imports/api/helpSession';\nimport '../imports/api/conversations';\nimport '../imports/api/images';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]