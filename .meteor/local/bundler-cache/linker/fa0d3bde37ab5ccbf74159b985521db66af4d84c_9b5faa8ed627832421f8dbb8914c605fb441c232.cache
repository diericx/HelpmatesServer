[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nlodash = Package['erasaur:meteor-lodash'].lodash;\n_ = Package.underscore._;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nFS = Package['cfs:base-package'].FS;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"conversations.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// imports/api/conversations.js                                                                 //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nconst Conversations = new Mongo.Collection('conversations');\nMeteor.methods({\n  'conversations.sendMessage': ({\n    conversationId,\n    message\n  }) => {\n    // const convo = Conversations.findOne(conversationId);\n    Conversations.update({\n      _id: conversationId\n    }, {\n      $push: {\n        messages: message\n      }\n    }); // return Courses.insert({ universityId, title1, title2, subject });\n  }\n});\nmodule.exportDefault(Conversations);\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"courses.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// imports/api/courses.js                                                                       //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Universities;\nmodule.watch(require(\"./universities\"), {\n  default(v) {\n    Universities = v;\n  }\n\n}, 2);\nlet Conversations;\nmodule.watch(require(\"./conversations\"), {\n  default(v) {\n    Conversations = v;\n  }\n\n}, 3);\nconst Courses = new Mongo.Collection('courses');\nMeteor.methods({\n  'courses.addOne': ({\n    universityId,\n    title1,\n    title2,\n    subject\n  }) => {\n    const uni = Universities.findOne(universityId);\n\n    if (uni == null) {\n      throw new Meteor.Error('courses.addOne.notFound', 'University by that ID not found');\n    } // create new conversation\n\n\n    conversationId = Conversations.insert({\n      messages: []\n    });\n    return Courses.insert({\n      universityId,\n      title1,\n      title2,\n      subject,\n      conversationId\n    });\n  },\n  'courses.getAllForUni': ({\n    universityId\n  }) => {\n    const uni = Universities.findOne(universityId);\n\n    if (uni == null) {\n      throw new Meteor.Error('courses.addOne.notFound', 'University by that ID not found');\n    }\n\n    return Courses.find({\n      universityId: universityId\n    }).fetch();\n  }\n});\nMeteor.publish('courses', function () {\n  return Courses.find({});\n});\nMeteor.publish('courseChat', function ({\n  id\n}) {\n  // get course data\n  var course = Courses.findOne({\n    _id: id\n  });\n  return Conversations.find({\n    _id: course.conversationId\n  });\n});\nmodule.exportDefault(Courses);\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"helpSession.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// imports/api/helpSession.js                                                                   //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Random;\nmodule.watch(require(\"meteor/random\"), {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet Conversations;\nmodule.watch(require(\"./conversations\"), {\n  default(v) {\n    Conversations = v;\n  }\n\n}, 3);\nlet Courses;\nmodule.watch(require(\"./courses\"), {\n  default(v) {\n    Courses = v;\n  }\n\n}, 4);\nconst HelpSessions = new Mongo.Collection('helpSessions');\nMeteor.methods({\n  // SETTERS\n  'helpSessions.create': ({\n    studentId,\n    tutorId,\n    courseId,\n    startDate,\n    endDate,\n    initialMessageText\n  }) => {\n    // get cost of this session\n    tutor = Meteor.users.findOne({\n      _id: tutorId\n    });\n    student = Meteor.users.findOne({\n      _id: studentId\n    });\n    cost = tutor.profile.completedCourses[courseId]; // make sure cost, tutor and student exist\n\n    if (!cost || !tutor || !student) {\n      return false;\n    } // create new conversation for this session\n\n\n    conversationId = Conversations.insert({\n      messages: []\n    }); // create initial message\n\n    const initialMessageTextPrefix = \"Hi! I need help with \";\n    const message = {\n      text: initialMessageTextPrefix + initialMessageText,\n      user: {\n        _id: studentId,\n        name: student.profile.name\n      },\n      createdAt: new Date(),\n      _id: Random.id() // send initial message\n\n    };\n    Meteor.call(\"conversations.sendMessage\", {\n      conversationId,\n      message\n    }); // create new help session with link to convo\n\n    return HelpSessions.insert({\n      studentId,\n      tutorId,\n      courseId,\n      cost,\n      startDate,\n      endDate,\n      tutorAccepted: false,\n      tutorDenied: false,\n      tutorStarted: false,\n      studentStarted: false,\n      tutorEnded: false,\n      studentEnded: false,\n      denyMessage: \"\",\n      cancelled: false,\n      cancelledBy: null,\n      cancelMessage: \"\",\n      conversationId: conversationId\n    });\n  },\n  'helpSessions.accept': ({\n    sessionId\n  }) => {\n    // find session\n    const session = HelpSessions.findOne(sessionId);\n    const tutor = Meteor.users.findOne({\n      _id: session.tutorId\n    }); // make sure this user has authority to accept a session\n\n    if (session.tutorId == Meteor.userId()) {\n      HelpSessions.update({\n        _id: sessionId\n      }, {\n        $set: {\n          tutorAccepted: true\n        }\n      }); // send system message update\n\n      const message = {\n        _id: Random.id(),\n        text: tutor.profile.name + \" accepted! Figure out where to meet.\",\n        createdAt: new Date(),\n        system: true // send system message\n\n      };\n      Meteor.call(\"conversations.sendMessage\", {\n        conversationId: session.conversationId,\n        message\n      });\n      return true;\n    }\n\n    return {\n      error: \"You do not have access to this session\"\n    };\n  },\n  'helpSessions.end': ({\n    sessionId\n  }) => {\n    // find session\n    const session = HelpSessions.findOne(sessionId);\n\n    if (session.tutorId == Meteor.userId()) {\n      HelpSessions.update({\n        _id: sessionId\n      }, {\n        $set: {\n          tutorEnded: true\n        }\n      });\n      session.tutorEnded = true;\n    } else if (session.studentId == Meteor.userId()) {\n      HelpSessions.update({\n        _id: sessionId\n      }, {\n        $set: {\n          studentEnded: true\n        }\n      });\n    } // if they both ended, add an ended date\n\n\n    if (session.studentEnded && session.tutorEnded) {\n      HelpSessions.update({\n        _id: sessionId\n      }, {\n        $set: {\n          endedAt: new Date()\n        }\n      });\n      session.studentEnded = true;\n    }\n  },\n  'helpSessions.start': ({\n    sessionId\n  }) => {\n    const session = HelpSessions.findOne(sessionId);\n    const userId = Meteor.userId(); // make sure session exists\n\n    if (!session) {\n      return {\n        error: \"Session not found\"\n      };\n    } // if the user is the tutor, set tutorAccepted to true\n\n\n    if (session.tutorId == userId) {\n      // edit local document so we can check the values later\n      session.tutorStarted = true;\n      HelpSessions.update(sessionId, {\n        $set: {\n          tutorStarted: true\n        }\n      });\n    } // if the user is the student, set studentAccepted to true\n\n\n    if (session.studentId == userId) {\n      // edit local document so we can check the values later\n      session.studentStarted = true;\n      HelpSessions.update(sessionId, {\n        $set: {\n          studentStarted: true\n        }\n      });\n    } // set started at if both have started\n\n\n    if (session.tutorStarted && session.studentStarted) {\n      HelpSessions.update(sessionId, {\n        $set: {\n          startedAt: new Date()\n        }\n      });\n    }\n  }\n});\nMeteor.publish('mySessions', function () {\n  var sessionsCursor = HelpSessions.find({\n    $or: [{\n      studentId: Meteor.userId()\n    }, {\n      tutorId: Meteor.userId()\n    }]\n  }, {\n    fields: {\n      _id: 1,\n      courseId: 1,\n      studentId: 1,\n      tutorId: 1,\n      tutorAccepted: 1,\n      tutorDenied: 1,\n      cancelled: 1,\n      endedAt: 1,\n      startedAt: 1\n    }\n  });\n  var sessions = sessionsCursor.fetch();\n\n  var studentIds = _.pluck(sessions, \"studentId\");\n\n  var tutorIds = _.pluck(sessions, \"tutorId\");\n\n  var userIds = tutorIds.concat(studentIds);\n\n  var courseIds = _.pluck(sessions, \"courseId\");\n\n  var usersCursor = Meteor.users.find({\n    _id: {\n      $in: userIds\n    }\n  });\n  var coursesCursor = Courses.find({\n    _id: {\n      $in: courseIds\n    }\n  });\n  return [sessionsCursor, usersCursor, coursesCursor];\n});\nMeteor.publish('session', function ({\n  id\n}) {\n  // get cursor for this session\n  var sessionCursor = HelpSessions.find({\n    _id: id\n  }); // get the data, make sure the session exists\n\n  var sessionData = HelpSessions.findOne(id);\n\n  if (!sessionData) {\n    return {\n      error: \"Session not found\"\n    };\n  } // get cursors for each user and conversation\n\n\n  var conversationCursor = Conversations.find({\n    _id: sessionData.conversationId\n  });\n  return [sessionCursor, conversationCursor];\n});\nmodule.exportDefault(HelpSessions);\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"images.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// imports/api/images.js                                                                        //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nImages = new FS.Collection(\"images\", {\n  stores: [new FS.Store.FileSystem(\"images\", {\n    path: \"~/uploads\"\n  })]\n});\nImages.allow({\n  'insert': function () {\n    // add custom authentication code here\n    return true;\n  }\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"universities.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// imports/api/universities.js                                                                  //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nconst Universities = new Mongo.Collection('universities');\nMeteor.methods({\n  'universities.addOne': ({\n    name,\n    abbreviation,\n    state,\n    city\n  }) => {\n    return Universities.insert({\n      name,\n      abbreviation,\n      state,\n      city\n    });\n  }\n});\nmodule.exportDefault(Universities);\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"users.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// imports/api/users.js                                                                         //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nlet Courses;\nmodule.watch(require(\"./courses\"), {\n  default(v) {\n    Courses = v;\n  }\n\n}, 0);\nAccounts.onCreateUser((options, user) => {\n  // add your extra fields here; don't forget to validate the options, if needed\n  _.extend(user, {\n    createdAt: new Date(),\n    profile: {\n      name: options.name,\n      imageId: null,\n      completedCourses: {},\n      rate: 0,\n      availabilities: []\n    }\n  });\n\n  return user;\n});\nMeteor.methods({\n  // SETTERS\n  'users.setName': ({\n    name\n  }) => {\n    var profile = Meteor.user().profile;\n    profile.name = name;\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        profile: profile\n      }\n    });\n  },\n  'users.setProfileImage': ({\n    image\n  }) => {\n    FS.Utility.eachFile(event, function (image) {\n      Images.insert(file, function (err, fileObj) {\n        if (err) {\n          return false;\n        } else {\n          // update profile to include profile image id\n          Meteor.users.update(Meteor.userId(), {\n            $set: {\n              \"profile.imageId\": fileObj_id\n            }\n          });\n          return true;\n        } // Inserted new doc with ID fileObj._id, and kicked off the data upload using HTTP\n\n      });\n    });\n  },\n  'users.addCompletedCourse': ({\n    courseId,\n    rate\n  }) => {\n    // attempt to find user by id\n    const user = Meteor.user();\n    const course = Courses.findOne(courseId); // make sure this user and course exists\n\n    if (!user || !course) {\n      return false;\n    } // update set query\n\n\n    var set = {\n      profile: user.profile\n    };\n    set.profile.completedCourses[courseId] = rate; // update completedCourses array in profile\n\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: set\n    });\n    return true;\n  },\n  'users.removeCompletedCourse': ({\n    courseId\n  }) => {\n    // update set query\n    const user = Meteor.user();\n    var set = {\n      profile: user.profile\n    };\n    delete set.profile.completedCourses[courseId]; // apply it\n\n    Meteor.users.update(Meteor.userId(), {\n      $set: set\n    });\n  },\n  'users.setRateForCourse': ({\n    courseId,\n    rate\n  }) => {\n    // update set query\n    const user = Meteor.user();\n    var set = {\n      profile: user.profile\n    };\n    set.profile.completedCourses[courseId] = rate; // apply it\n\n    Meteor.users.update(Meteor.userId(), {\n      $set: set\n    });\n  },\n  'users.addAvailability': ({\n    date,\n    length,\n    repeats\n  }) => {\n    var newAvailability = {\n      \"date\": date,\n      \"length\": length,\n      \"repeats\": repeats\n    };\n    console.log(newAvailability);\n    Meteor.users.update({\n      _id: Meteor.userId()\n    }, {\n      $addToSet: {\n        \"profile.availabilities\": newAvailability\n      }\n    });\n  },\n  'users.rateUser': ({\n    userId,\n    targetUserId,\n    rating,\n    message\n  }) => {},\n  // GETTERS\n  'users.getAvailabilities': ({\n    userId\n  }) => {\n    const user = Meteor.users.findOne(userId);\n\n    if (user) {\n      const profile = user.profile;\n      return user.profile.availabilities;\n    } else {\n      return [];\n    }\n  },\n  'users.getAllWhoCompletedCourse': ({\n    courseId\n  }) => {\n    const users = Meteor.users.find({\n      \"profile.completedCourses\": {\n        $in: [courseId]\n      }\n    }, {\n      fields: {\n        \"profile\": 1\n      }\n    }).fetch();\n    return users;\n  }\n});\nMeteor.publish('tutors', function () {\n  var tutors = Meteor.users.find({\n    \"profile.completedCourses\": {\n      $ne: []\n    }\n  }, {\n    fields: {\n      profile: 1,\n      _id: 1\n    }\n  });\n  return tutors;\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// server/main.js                                                                               //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.watch(require(\"../imports/api/courses\"));\nmodule.watch(require(\"../imports/api/universities\"));\nmodule.watch(require(\"../imports/api/users\"));\nmodule.watch(require(\"../imports/api/helpSession\"));\nmodule.watch(require(\"../imports/api/conversations\"));\nmodule.watch(require(\"../imports/api/images\"));\nMeteor.startup(() => {// code to run on server at startup\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/conversations.js","imports/api/courses.js","imports/api/helpSession.js","imports/api/images.js","imports/api/universities.js","imports/api/users.js","server/main.js"],"names":["Mongo","module","watch","require","v","Meteor","Conversations","Collection","methods","conversationId","message","update","_id","$push","messages","exportDefault","Universities","default","Courses","universityId","title1","title2","subject","uni","findOne","Error","insert","find","fetch","publish","id","course","Random","HelpSessions","studentId","tutorId","courseId","startDate","endDate","initialMessageText","tutor","users","student","cost","profile","completedCourses","initialMessageTextPrefix","text","user","name","createdAt","Date","call","tutorAccepted","tutorDenied","tutorStarted","studentStarted","tutorEnded","studentEnded","denyMessage","cancelled","cancelledBy","cancelMessage","sessionId","session","userId","$set","system","error","endedAt","startedAt","sessionsCursor","$or","fields","sessions","studentIds","_","pluck","tutorIds","userIds","concat","courseIds","usersCursor","$in","coursesCursor","sessionCursor","sessionData","conversationCursor","Images","FS","stores","Store","FileSystem","path","allow","abbreviation","state","city","Accounts","onCreateUser","options","extend","imageId","rate","availabilities","image","Utility","eachFile","event","file","err","fileObj","fileObj_id","set","date","length","repeats","newAvailability","console","log","$addToSet","targetUserId","rating","tutors","$ne","startup"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\n\nconst Conversations = new Mongo.Collection('conversations');\n\nMeteor.methods({\n    'conversations.sendMessage': ({ conversationId, message }) => {\n        // const convo = Conversations.findOne(conversationId);\n        Conversations.update(\n            {_id: conversationId},\n            {$push: { messages: message }}\n        )\n        // return Courses.insert({ universityId, title1, title2, subject });\n    },\n});\n\nexport default Conversations;","import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\nimport Universities from './universities';\nimport Conversations from './conversations';\n\nconst Courses = new Mongo.Collection('courses');\n\nMeteor.methods({\n    'courses.addOne': ({ universityId, title1, title2, subject }) => {\n        const uni = Universities.findOne(universityId);\n\n        if (uni == null) {\n            throw new Meteor.Error('courses.addOne.notFound',\n            'University by that ID not found');\n        }\n\n        // create new conversation\n        conversationId = Conversations.insert({messages: []})\n\n        return Courses.insert({ universityId, title1, title2, subject, conversationId });\n    },\n    \n    'courses.getAllForUni': ({universityId}) => {\n        const uni = Universities.findOne(universityId);\n\n        if (uni == null) {\n            throw new Meteor.Error('courses.addOne.notFound',\n            'University by that ID not found');\n        }\n\n        return Courses.find({universityId: universityId}).fetch();\n    },\n})\n\nMeteor.publish('courses', function () {\n    return Courses.find({})\n});\n\nMeteor.publish('courseChat', function({id}) {\n    // get course data\n    var course = Courses.findOne({_id: id})\n    return Conversations.find({_id: course.conversationId})\n});\n\nexport default Courses;\n\n// Meteor.call('courses.addOne', 'bJ2ppiHYrMFRThfWE', 'Intro to Computer Science I', 'COMP 1671', 'Computer Science')\n","import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random'\n\nimport Conversations from './conversations';\nimport Courses from \"./courses\";\n\nconst HelpSessions = new Mongo.Collection('helpSessions');\n\nMeteor.methods({\n    // SETTERS\n    'helpSessions.create': ({ studentId, tutorId, courseId, startDate, endDate, initialMessageText }) => {\n        // get cost of this session\n        tutor = Meteor.users.findOne({_id: tutorId})\n        student = Meteor.users.findOne({_id: studentId});\n        cost = tutor.profile.completedCourses[courseId]\n        // make sure cost, tutor and student exist\n        if (!cost || !tutor || !student) {\n            return false\n        }\n        // create new conversation for this session\n        conversationId = Conversations.insert({messages: []})\n        // create initial message\n        const initialMessageTextPrefix = \"Hi! I need help with \"\n        const message = {\n            text: initialMessageTextPrefix + initialMessageText,\n            user: {\n                _id: studentId,\n                name: student.profile.name,\n            },\n            createdAt: new Date(),\n            _id: Random.id(),\n        }\n        // send initial message\n        Meteor.call(\"conversations.sendMessage\", {conversationId, message})\n        // create new help session with link to convo\n        return HelpSessions.insert({ studentId, tutorId, courseId, cost, startDate, endDate, tutorAccepted: false, tutorDenied: false, tutorStarted: false, studentStarted: false, tutorEnded: false, studentEnded: false,  denyMessage: \"\", cancelled: false, cancelledBy: null, cancelMessage: \"\", conversationId: conversationId  });\n    },\n    'helpSessions.accept': ({ sessionId }) => {\n        // find session\n        const session = HelpSessions.findOne(sessionId)\n        const tutor = Meteor.users.findOne({_id: session.tutorId})\n        // make sure this user has authority to accept a session\n        if (session.tutorId == Meteor.userId()) {\n            HelpSessions.update(\n                {_id: sessionId},\n                {$set: {tutorAccepted: true}}\n            )\n\n            // send system message update\n            const message = {\n                _id: Random.id(),\n                text: tutor.profile.name + \" accepted! Figure out where to meet.\",\n                createdAt: new Date(),\n                system: true,\n            }\n            // send system message\n            Meteor.call(\"conversations.sendMessage\", {conversationId: session.conversationId, message})\n\n            return true\n        }\n        return {error: \"You do not have access to this session\"}\n    },\n    'helpSessions.end': ({ sessionId }) => {\n        // find session\n        const session = HelpSessions.findOne(sessionId)\n        if (session.tutorId == Meteor.userId()) {\n            HelpSessions.update(\n                {_id: sessionId},\n                {$set: {tutorEnded: true}}\n            )\n            session.tutorEnded = true\n        } else if (session.studentId == Meteor.userId()){\n            HelpSessions.update(\n                {_id: sessionId},\n                {$set: {studentEnded: true}}\n            )\n        }\n        // if they both ended, add an ended date\n        if (session.studentEnded && session.tutorEnded) {\n            HelpSessions.update(\n                {_id: sessionId},\n                {$set: {endedAt: new Date()}}\n            )\n            session.studentEnded = true\n        }\n    },\n    'helpSessions.start': ({ sessionId }) => {\n        const session = HelpSessions.findOne(sessionId)\n        const userId = Meteor.userId()\n        // make sure session exists\n        if (!session) {\n            return {error: \"Session not found\"}\n        }\n        // if the user is the tutor, set tutorAccepted to true\n        if (session.tutorId == userId) {\n            // edit local document so we can check the values later\n            session.tutorStarted = true\n            HelpSessions.update(\n                sessionId, \n                {$set: {tutorStarted: true}}\n            )\n        }\n        // if the user is the student, set studentAccepted to true\n        if (session.studentId == userId) {\n            // edit local document so we can check the values later\n            session.studentStarted = true\n            HelpSessions.update(\n                sessionId, \n                {$set: {studentStarted: true}}\n            )\n        }\n        // set started at if both have started\n        if (session.tutorStarted && session.studentStarted) {\n            HelpSessions.update(\n                sessionId, \n                {$set: {startedAt: new Date()}}\n            )\n        }\n    }\n});\n\nMeteor.publish('mySessions', function () {\n    var sessionsCursor = HelpSessions.find({$or: [{studentId: Meteor.userId()}, {tutorId: Meteor.userId()}]}, {\n        fields: {_id: 1, courseId: 1, studentId: 1, tutorId: 1, tutorAccepted: 1, tutorDenied: 1, cancelled: 1, endedAt: 1, startedAt: 1}\n    })\n    var sessions = sessionsCursor.fetch()\n\n    var studentIds =  _.pluck(sessions,\"studentId\");\n    var tutorIds = _.pluck(sessions,\"tutorId\");\n\n    var userIds = tutorIds.concat(studentIds);\n    var courseIds = _.pluck(sessions, \"courseId\")\n\n    var usersCursor = Meteor.users.find({\n        _id : {$in : userIds}\n    });\n\n    var coursesCursor = Courses.find({_id: {$in : courseIds}})\n\n    return [\n        sessionsCursor,\n        usersCursor,\n        coursesCursor,\n    ];\n});\n\nMeteor.publish('session', function({id}) {\n    // get cursor for this session\n    var sessionCursor = HelpSessions.find({_id: id})\n    // get the data, make sure the session exists\n    var sessionData = HelpSessions.findOne(id)\n    if (!sessionData) {\n        return {error: \"Session not found\"}\n    }\n    // get cursors for each user and conversation\n    var conversationCursor = Conversations.find({_id: sessionData.conversationId})\n\n    return [\n        sessionCursor,\n        conversationCursor,\n    ];\n});\n\nexport default HelpSessions;","Images = new FS.Collection(\"images\", {\n    stores: [new FS.Store.FileSystem(\"images\", {path: \"~/uploads\"})]\n});\n\nImages.allow({\n    'insert': function () {\n        // add custom authentication code here\n        return true;\n    }\n});","import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\n\nconst Universities = new Mongo.Collection('universities');\n\nMeteor.methods({\n    'universities.addOne': ({ name, abbreviation, state, city }) => {\n        return Universities.insert({ name, abbreviation, state, city });\n    },\n})\n\nexport default Universities;\n","import Courses from \"./courses\";\n\nAccounts.onCreateUser((options, user) => {\n    // add your extra fields here; don't forget to validate the options, if needed\n    _.extend(user, {\n        createdAt: new Date(),\n        profile: {\n            name: options.name,\n            imageId: null,\n            completedCourses: {},\n            rate: 0,\n            availabilities: [],\n        }\n    });\n    \n    return user;\n});\n\nMeteor.methods({\n    // SETTERS\n    'users.setName': ({name}) => {\n        var profile = Meteor.user().profile\n        profile.name = name\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: {profile: profile} }\n        )\n    },\n\n    'users.setProfileImage': ({image}) => {\n        FS.Utility.eachFile(event, function(image) {\n            Images.insert(file, function (err, fileObj) {\n                if (err) {\n                    return false;\n                } else {\n                    // update profile to include profile image id\n                    Meteor.users.update(\n                        Meteor.userId(), \n                        { $set: {\"profile.imageId\": fileObj_id} }\n                    )\n                    return true;\n                }\n                // Inserted new doc with ID fileObj._id, and kicked off the data upload using HTTP\n            });\n        });\n    },\n\n    'users.addCompletedCourse': ({courseId, rate}) => {\n        // attempt to find user by id\n        const user = Meteor.user();\n        const course = Courses.findOne(courseId);\n        // make sure this user and course exists\n        if (!user || !course) {\n            return false;\n        }\n        // update set query\n        var set = {profile: user.profile};\n        set.profile.completedCourses[courseId] = rate;\n        // update completedCourses array in profile\n        Meteor.users.update(\n            {_id: user._id}, \n            { $set: set }\n        )\n        return true;\n    },\n\n    'users.removeCompletedCourse': ({courseId}) => {\n        // update set query\n        const user = Meteor.user();\n        var set = {profile: user.profile};\n        delete set.profile.completedCourses[courseId];\n        // apply it\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: set }\n        )\n    },\n\n    'users.setRateForCourse': ({courseId, rate}) => {\n        // update set query\n        const user = Meteor.user();\n        var set = {profile: user.profile};\n        set.profile.completedCourses[courseId] = rate;\n        // apply it\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: set }\n        )\n    },\n\n    'users.addAvailability': ({date, length, repeats}) => {\n        var newAvailability = {\"date\": date, \"length\": length, \"repeats\": repeats}\n        console.log(newAvailability)\n        Meteor.users.update(\n            {_id: Meteor.userId()}, \n            { $addToSet: {\"profile.availabilities\": newAvailability} }\n        )\n    },\n\n    'users.rateUser': ({userId, targetUserId, rating, message}) => {\n        \n    },\n\n    // GETTERS\n    'users.getAvailabilities': ({userId}) => {\n        const user = Meteor.users.findOne(userId)\n        \n        if (user) {\n            const profile = user.profile\n            return user.profile.availabilities\n        } else {\n            return []\n        }\n        \n    },\n\n    'users.getAllWhoCompletedCourse': ({courseId}) => {\n        const users = Meteor.users.find(\n            { \"profile.completedCourses\": { $in: [ courseId ] }},\n            {fields: { \"profile\": 1,} \n        }).fetch();\n\n        return users;\n    },\n})\n\nMeteor.publish('tutors', function () {\n    var tutors = Meteor.users.find(\n        {\"profile.completedCourses\": {$ne: []}},\n        {\n            fields: {\n                profile: 1, _id: 1,\n            }\n        }\n    )\n    return tutors\n});","import { Meteor } from 'meteor/meteor';\nimport '../imports/api/courses';\nimport '../imports/api/universities';\nimport '../imports/api/users';\nimport '../imports/api/helpSession';\nimport '../imports/api/conversations';\nimport '../imports/api/images';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]