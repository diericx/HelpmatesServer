[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"courses.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// imports/api/courses.js                                                                   //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Universities;\nmodule.watch(require(\"./universities\"), {\n  default(v) {\n    Universities = v;\n  }\n\n}, 2);\nconst Courses = new Mongo.Collection('courses');\nMeteor.methods({\n  'courses.addOne': ({\n    universityId,\n    title1,\n    title2,\n    subject\n  }) => {\n    const uni = Universities.findOne(universityId);\n\n    if (uni == null) {\n      throw new Meteor.Error('courses.addOne.notFound', 'University by that ID not found');\n    }\n\n    return Courses.insert({\n      universityId,\n      title1,\n      title2,\n      subject\n    });\n  },\n  'courses.getAllForUni': ({\n    universityId\n  }) => {\n    const uni = Universities.findOne(universityId);\n\n    if (uni == null) {\n      throw new Meteor.Error('courses.addOne.notFound', 'University by that ID not found');\n    }\n\n    return Courses.find({\n      universityId: universityId\n    }).fetch();\n  },\n  'courses.getAllUsersWhoCompletedCourse': ({\n    courseId\n  }) => {\n    const users = Meteor.users.find({\n      completedCourses: {\n        $in: [courseId]\n      }\n    }).fetch();\n    return users;\n  },\n  'courses.addCompletedCourse': ({\n    courseId\n  }) => {\n    // attempt to find user by id\n    const user = Meteor.user(); // make sure this user exists\n\n    if (user == null) {\n      return false;\n    } // update completedCourses array\n\n\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $addToSet: {\n        completedCourses: courseId\n      }\n    });\n    return true;\n  }\n});\nmodule.exportDefault(Courses);\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"universities.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// imports/api/universities.js                                                              //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nconst Universities = new Mongo.Collection('universities');\nMeteor.methods({\n  'universities.addOne': ({\n    name,\n    abbreviation,\n    state,\n    city\n  }) => {\n    return Universities.insert({\n      name,\n      abbreviation,\n      state,\n      city\n    });\n  }\n});\nmodule.exportDefault(Universities);\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"users.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// imports/api/users.js                                                                     //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nlet _;\n\nmodule.watch(require(\"lodash\"), {\n  default(v) {\n    _ = v;\n  }\n\n}, 0);\nAccounts.onCreateUser((options, user) => {\n  // add your extra fields here; don't forget to validate the options, if needed\n  _.extend(user, {\n    createdAt: new Date(),\n    profile: {\n      name: \"\",\n      completedCourses: []\n    }\n  });\n\n  return user;\n});\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// server/main.js                                                                           //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.watch(require(\"../imports/api/courses\"));\nmodule.watch(require(\"../imports/api/universities\"));\nmodule.watch(require(\"../imports/api/users\"));\nMeteor.startup(() => {// code to run on server at startup\n});\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/courses.js","imports/api/universities.js","imports/api/users.js","server/main.js"],"names":["Mongo","module","watch","require","v","Meteor","Universities","default","Courses","Collection","methods","universityId","title1","title2","subject","uni","findOne","Error","insert","find","fetch","courseId","users","completedCourses","$in","user","update","_id","$addToSet","exportDefault","name","abbreviation","state","city","_","Accounts","onCreateUser","options","extend","createdAt","Date","profile","startup"],"mappings":";;;;;;;;AAAA,IAAIA,KAAJ;AAAUC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACH,QAAMI,CAAN,EAAQ;AAACJ,YAAMI,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIC,MAAJ;AAAWJ,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACE,SAAOD,CAAP,EAAS;AAACC,aAAOD,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIE,YAAJ;AAAiBL,OAAOC,KAAP,CAAaC,QAAQ,gBAAR,CAAb,EAAuC;AAACI,UAAQH,CAAR,EAAU;AAACE,mBAAaF,CAAb;AAAe;;AAA3B,CAAvC,EAAoE,CAApE;AAIjK,MAAMI,UAAU,IAAIR,MAAMS,UAAV,CAAqB,SAArB,CAAhB;AAEAJ,OAAOK,OAAP,CAAe;AACX,oBAAkB,CAAC;AAAEC,gBAAF;AAAgBC,UAAhB;AAAwBC,UAAxB;AAAgCC;AAAhC,GAAD,KAA+C;AAC7D,UAAMC,MAAMT,aAAaU,OAAb,CAAqBL,YAArB,CAAZ;;AAEA,QAAII,OAAO,IAAX,EAAiB;AACb,YAAM,IAAIV,OAAOY,KAAX,CAAiB,yBAAjB,EACN,iCADM,CAAN;AAEH;;AAED,WAAOT,QAAQU,MAAR,CAAe;AAAEP,kBAAF;AAAgBC,YAAhB;AAAwBC,YAAxB;AAAgCC;AAAhC,KAAf,CAAP;AACH,GAVU;AAYX,0BAAwB,CAAC;AAACH;AAAD,GAAD,KAAoB;AACxC,UAAMI,MAAMT,aAAaU,OAAb,CAAqBL,YAArB,CAAZ;;AAEA,QAAII,OAAO,IAAX,EAAiB;AACb,YAAM,IAAIV,OAAOY,KAAX,CAAiB,yBAAjB,EACN,iCADM,CAAN;AAEH;;AAED,WAAOT,QAAQW,IAAR,CAAa;AAACR,oBAAcA;AAAf,KAAb,EAA2CS,KAA3C,EAAP;AACH,GArBU;AAuBX,2CAAyC,CAAC;AAACC;AAAD,GAAD,KAAgB;AACrD,UAAMC,QAAQjB,OAAOiB,KAAP,CAAaH,IAAb,CAAkB;AAAEI,wBAAkB;AAAEC,aAAK,CAAEH,QAAF;AAAP;AAApB,KAAlB,EAA8DD,KAA9D,EAAd;AACA,WAAOE,KAAP;AACH,GA1BU;AA4BX,gCAA8B,CAAC;AAACD;AAAD,GAAD,KAAgB;AAC1C;AACA,UAAMI,OAAOpB,OAAOoB,IAAP,EAAb,CAF0C,CAG1C;;AACA,QAAIA,QAAQ,IAAZ,EAAkB;AACd,aAAO,KAAP;AACH,KANyC,CAQ1C;;;AACApB,WAAOiB,KAAP,CAAaI,MAAb,CACI;AAACC,WAAKF,KAAKE;AAAX,KADJ,EAEI;AAAEC,iBAAW;AAACL,0BAAkBF;AAAnB;AAAb,KAFJ;AAIA,WAAO,IAAP;AACH;AA1CU,CAAf;AANApB,OAAO4B,aAAP,CAmDerB,OAnDf,E;;;;;;;;;;;ACAA,IAAIR,KAAJ;AAAUC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACH,QAAMI,CAAN,EAAQ;AAACJ,YAAMI,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIC,MAAJ;AAAWJ,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACE,SAAOD,CAAP,EAAS;AAACC,aAAOD,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAGjF,MAAME,eAAe,IAAIN,MAAMS,UAAV,CAAqB,cAArB,CAArB;AAEAJ,OAAOK,OAAP,CAAe;AACX,yBAAuB,CAAC;AAAEoB,QAAF;AAAQC,gBAAR;AAAsBC,SAAtB;AAA6BC;AAA7B,GAAD,KAAyC;AAC5D,WAAO3B,aAAaY,MAAb,CAAoB;AAAEY,UAAF;AAAQC,kBAAR;AAAsBC,WAAtB;AAA6BC;AAA7B,KAApB,CAAP;AACH;AAHU,CAAf;AALAhC,OAAO4B,aAAP,CAWevB,YAXf,E;;;;;;;;;;;ACAA,IAAI4B,CAAJ;;AAAMjC,OAAOC,KAAP,CAAaC,QAAQ,QAAR,CAAb,EAA+B;AAACI,UAAQH,CAAR,EAAU;AAAC8B,QAAE9B,CAAF;AAAI;;AAAhB,CAA/B,EAAiD,CAAjD;AAEN+B,SAASC,YAAT,CAAsB,CAACC,OAAD,EAAUZ,IAAV,KAAmB;AACrC;AACAS,IAAEI,MAAF,CAASb,IAAT,EAAe;AACXc,eAAW,IAAIC,IAAJ,EADA;AAEXC,aAAS;AACLX,YAAM,EADD;AAELP,wBAAkB;AAFb;AAFE,GAAf;;AAQA,SAAOE,IAAP;AACH,CAXD,E;;;;;;;;;;;ACFA,IAAIpB,MAAJ;AAAWJ,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACE,SAAOD,CAAP,EAAS;AAACC,aAAOD,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+DH,OAAOC,KAAP,CAAaC,QAAQ,wBAAR,CAAb;AAAgDF,OAAOC,KAAP,CAAaC,QAAQ,6BAAR,CAAb;AAAqDF,OAAOC,KAAP,CAAaC,QAAQ,sBAAR,CAAb;AAK/KE,OAAOqC,OAAP,CAAe,MAAM,CACnB;AACD,CAFD,E","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\nimport Universities from './universities';\n\nconst Courses = new Mongo.Collection('courses');\n\nMeteor.methods({\n    'courses.addOne': ({ universityId, title1, title2, subject }) => {\n        const uni = Universities.findOne(universityId);\n\n        if (uni == null) {\n            throw new Meteor.Error('courses.addOne.notFound',\n            'University by that ID not found');\n        }\n\n        return Courses.insert({ universityId, title1, title2, subject });\n    },\n    \n    'courses.getAllForUni': ({universityId}) => {\n        const uni = Universities.findOne(universityId);\n\n        if (uni == null) {\n            throw new Meteor.Error('courses.addOne.notFound',\n            'University by that ID not found');\n        }\n\n        return Courses.find({universityId: universityId}).fetch();\n    },\n\n    'courses.getAllUsersWhoCompletedCourse': ({courseId}) => {\n        const users = Meteor.users.find({ completedCourses: { $in: [ courseId ] }}).fetch();\n        return users;\n    },\n\n    'courses.addCompletedCourse': ({courseId}) => {\n        // attempt to find user by id\n        const user = Meteor.user();\n        // make sure this user exists\n        if (user == null) {\n            return false;\n        }\n\n        // update completedCourses array\n        Meteor.users.update(\n            {_id: user._id}, \n            { $addToSet: {completedCourses: courseId} }\n        )\n        return true;\n    }\n})\n\nexport default Courses;\n\n// Meteor.call('courses.addOne', 'bJ2ppiHYrMFRThfWE', 'Intro to Computer Science I', 'COMP 1671', 'Computer Science')\n","import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\n\nconst Universities = new Mongo.Collection('universities');\n\nMeteor.methods({\n    'universities.addOne': ({ name, abbreviation, state, city }) => {\n        return Universities.insert({ name, abbreviation, state, city });\n    },\n})\n\nexport default Universities;\n","import _ from 'lodash';\n\nAccounts.onCreateUser((options, user) => {\n    // add your extra fields here; don't forget to validate the options, if needed\n    _.extend(user, {\n        createdAt: new Date(),\n        profile: {\n            name: \"\",\n            completedCourses: []\n        }\n    });\n\n    return user;\n});","import { Meteor } from 'meteor/meteor';\nimport '../imports/api/courses';\nimport '../imports/api/universities';\nimport '../imports/api/users';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]