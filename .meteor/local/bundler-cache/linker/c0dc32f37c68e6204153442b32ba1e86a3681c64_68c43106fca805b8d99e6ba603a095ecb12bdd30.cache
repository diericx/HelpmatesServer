[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nlodash = Package['erasaur:meteor-lodash'].lodash;\n_ = Package.underscore._;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nFS = Package['cfs:base-package'].FS;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"courses.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/api/courses.js                                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Universities;\nmodule.watch(require(\"./universities\"), {\n  default(v) {\n    Universities = v;\n  }\n\n}, 2);\nconst Courses = new Mongo.Collection('courses');\nMeteor.methods({\n  'courses.addOne': ({\n    universityId,\n    title1,\n    title2,\n    subject\n  }) => {\n    const uni = Universities.findOne(universityId);\n\n    if (uni == null) {\n      throw new Meteor.Error('courses.addOne.notFound', 'University by that ID not found');\n    }\n\n    return Courses.insert({\n      universityId,\n      title1,\n      title2,\n      subject,\n      messages: []\n    });\n  },\n  'courses.sendMessage': ({\n    courseId,\n    message\n  }) => {\n    // update the messages object\n    Courses.update({\n      _id: courseId\n    }, {\n      $push: {\n        messages: message\n      }\n    });\n  } // 'courses.getAllForUni': ({universityId}) => {\n  //     const uni = Universities.findOne(universityId);\n  //     if (uni == null) {\n  //         throw new Meteor.Error('courses.addOne.notFound',\n  //         'University by that ID not found');\n  //     }\n  //     return Courses.find({universityId: universityId}).fetch();\n  // },\n\n});\nMeteor.publish('courses', function () {\n  return Courses.find({}, {\n    fields: {\n      messages: 0\n    }\n  });\n});\nMeteor.publish('course', function ({\n  courseId\n}) {\n  return Courses.find({\n    _id: courseId\n  });\n});\nMeteor.publish('myCourses', function () {\n  const courses = Meteor.user().profile.completedCourses;\n  const courseIds = Object.keys(courses);\n  return Courses.find({\n    _id: {\n      $in: courseIds\n    }\n  }, {\n    fields: {\n      messages: 0\n    }\n  });\n});\nmodule.exportDefault(Courses);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"expo.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/api/expo.js                                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  SendPushNotification: () => SendPushNotification\n});\nlet Expo;\nmodule.watch(require(\"expo-server-sdk\"), {\n  default(v) {\n    Expo = v;\n  }\n\n}, 0);\n// Create a new Expo SDK client\nlet expo = new Expo();\n\nfunction SendPushNotification(token, title, body) {\n  // if the token doesn't exist, don't send the notification\n  if (!token) {\n    return;\n  }\n\n  let messages = [];\n  messages.push({\n    to: token,\n    sound: 'default',\n    title: title,\n    body: body,\n    data: {\n      withSome: null\n    }\n  });\n  let chunks = expo.chunkPushNotifications(messages);\n\n  (() => Promise.asyncApply(() => {\n    // Send the chunks to the Expo push notification service. There are\n    // different strategies you could use. A simple one is to send one chunk at a\n    // time, which nicely spreads the load out over time:\n    for (let chunk of chunks) {\n      try {\n        let receipts = Promise.await(expo.sendPushNotificationsAsync(chunk));\n        console.log(receipts);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }))();\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"helpSession.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/api/helpSession.js                                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Random;\nmodule.watch(require(\"meteor/random\"), {\n  Random(v) {\n    Random = v;\n  }\n\n}, 2);\nlet Courses;\nmodule.watch(require(\"./courses\"), {\n  default(v) {\n    Courses = v;\n  }\n\n}, 3);\nlet SendPushNotification;\nmodule.watch(require(\"./expo\"), {\n  SendPushNotification(v) {\n    SendPushNotification = v;\n  }\n\n}, 4);\nconst HelpSessions = new Mongo.Collection('helpSessions');\nMeteor.methods({\n  // SETTERS\n  'helpSessions.create': ({\n    studentId,\n    tutorId,\n    courseId,\n    startDate,\n    endDate,\n    initialMessageText\n  }) => {\n    // get cost of this session\n    tutor = Meteor.users.findOne({\n      _id: tutorId\n    });\n    student = Meteor.users.findOne({\n      _id: studentId\n    });\n    cost = tutor.profile.completedCourses[courseId]; // make sure cost, tutor and student exist\n\n    if (!cost || !tutor || !student) {\n      return false;\n    } // create initial message\n\n\n    const initialMessageTextPrefix = \"Hi! I need help with \";\n    const message = {\n      text: initialMessageTextPrefix + initialMessageText,\n      user: {\n        _id: studentId,\n        name: student.profile.name\n      },\n      createdAt: new Date(),\n      _id: Random.id() // create the messages and notifications for this help session\n\n    };\n    var messages = [message];\n    var notifications = {};\n    notifications[tutorId] = 1;\n    notifications[student] = 0; // Send push notification to the tutor\n\n    if (tutor.profile.pushNotificationToken) {\n      SendPushNotification(tutor.profile.pushNotificationToken, student.profile.name + \" needs help!\", message.text);\n    } // create new help session with link to convo\n\n\n    return HelpSessions.insert({\n      studentId,\n      tutorId,\n      courseId,\n      cost,\n      startDate,\n      endDate,\n      tutorAccepted: false,\n      tutorDenied: false,\n      tutorStarted: false,\n      studentStarted: false,\n      tutorEnded: false,\n      studentEnded: false,\n      denyMessage: \"\",\n      cancelled: false,\n      cancelledBy: null,\n      cancelMessage: \"\",\n      messages,\n      notifications\n    });\n  },\n  'helpSessions.sendMessage': ({\n    sessionId,\n    message\n  }) => {\n    const session = HelpSessions.findOne(sessionId); // update the messages object\n\n    HelpSessions.update({\n      _id: sessionId\n    }, {\n      $push: {\n        \"messages\": message\n      }\n    }); // if it's a system message, don't do notifications\n    // TODO: Send notifications but don't use message info or else there is an error\n\n    if (message.system === true) {\n      return;\n    } // Send push notification to receipiant\n\n\n    SendPushNotification(receiver.profile.pushNotificationToken, Meteor.user().profile.name + \" sent you a message!\", message.text); // update the notifications\n\n    const otherUsersId = message.user._id == session.tutorId ? session.studentId : session.tutorId;\n    const receiver = Meteor.users.findOne(otherUsersId);\n    const currentNotificationValue = session.notifications[otherUsersId] || 0;\n    const notificationLocation = `notifications.${otherUsersId}`;\n    HelpSessions.update({\n      _id: sessionId\n    }, {\n      $set: {\n        [notificationLocation]: currentNotificationValue + 1\n      }\n    });\n  },\n  'helpSessions.clearNotificationsForUser': ({\n    sessionId\n  }) => {\n    const notificationLocation = `notifications.${Meteor.userId()}`;\n    HelpSessions.update({\n      _id: sessionId\n    }, {\n      $set: {\n        [notificationLocation]: 0\n      }\n    });\n  },\n  'helpSessions.accept': ({\n    sessionId\n  }) => {\n    // find session\n    const session = HelpSessions.findOne(sessionId);\n    const tutor = Meteor.users.findOne({\n      _id: session.tutorId\n    });\n    const student = Meteor.users.findOne({\n      _id: session.studentId\n    }); // make sure this user has authority to accept a session\n\n    if (session.tutorId == Meteor.userId()) {\n      HelpSessions.update({\n        _id: sessionId\n      }, {\n        $set: {\n          tutorAccepted: true\n        }\n      }); // send system message update\n\n      const message = {\n        text: tutor.profile.name + \" accepted! Figure out where to meet.\",\n        createdAt: new Date(),\n        system: true,\n        _id: Random.id() // send system message\n\n      };\n      Meteor.call(\"helpSessions.sendMessage\", {\n        sessionId: sessionId,\n        message\n      }); // Send push notification to the student IF they have a notification token\n\n      if (student.profile.pushNotificationToken) {\n        SendPushNotification(student.profile.pushNotificationToken, tutor.profile.name + \" accepted your request!\");\n      }\n\n      return true;\n    }\n\n    return {\n      error: \"You do not have access to this session\"\n    };\n  },\n  'helpSessions.end': ({\n    sessionId\n  }) => {\n    // find session\n    const session = HelpSessions.findOne(sessionId);\n\n    if (session.tutorId == Meteor.userId()) {\n      HelpSessions.update({\n        _id: sessionId\n      }, {\n        $set: {\n          tutorEnded: true\n        }\n      });\n      session.tutorEnded = true;\n    } else if (session.studentId == Meteor.userId()) {\n      HelpSessions.update({\n        _id: sessionId\n      }, {\n        $set: {\n          studentEnded: true\n        }\n      });\n    } // if they both ended, add an ended date\n\n\n    if (session.studentEnded && session.tutorEnded) {\n      HelpSessions.update({\n        _id: sessionId\n      }, {\n        $set: {\n          endedAt: new Date()\n        }\n      });\n      session.studentEnded = true;\n    }\n  },\n  'helpSessions.start': ({\n    sessionId\n  }) => {\n    const session = HelpSessions.findOne(sessionId);\n    const userId = Meteor.userId(); // make sure session exists\n\n    if (!session) {\n      return {\n        error: \"Session not found\"\n      };\n    } // if the user is the tutor, set tutorAccepted to true\n\n\n    if (session.tutorId == userId) {\n      // edit local document so we can check the values later\n      session.tutorStarted = true;\n      HelpSessions.update(sessionId, {\n        $set: {\n          tutorStarted: true\n        }\n      });\n    } // if the user is the student, set studentAccepted to true\n\n\n    if (session.studentId == userId) {\n      // edit local document so we can check the values later\n      session.studentStarted = true;\n      HelpSessions.update(sessionId, {\n        $set: {\n          studentStarted: true\n        }\n      });\n    } // set started at if both have started\n\n\n    if (session.tutorStarted && session.studentStarted) {\n      HelpSessions.update(sessionId, {\n        $set: {\n          startedAt: new Date()\n        }\n      });\n    }\n  }\n});\nMeteor.publish('mySessions', function () {\n  var sessionsCursor = HelpSessions.find({\n    $or: [{\n      studentId: Meteor.userId()\n    }, {\n      tutorId: Meteor.userId()\n    }]\n  }, {\n    fields: {\n      \"messages\": 0\n    }\n  });\n  var sessions = sessionsCursor.fetch();\n\n  var studentIds = _.pluck(sessions, \"studentId\");\n\n  var tutorIds = _.pluck(sessions, \"tutorId\");\n\n  var userIds = tutorIds.concat(studentIds);\n\n  var courseIds = _.pluck(sessions, \"courseId\");\n\n  var usersCursor = Meteor.users.find({\n    _id: {\n      $in: userIds\n    }\n  });\n  var coursesCursor = Courses.find({\n    _id: {\n      $in: courseIds\n    }\n  });\n  return [sessionsCursor, usersCursor, coursesCursor];\n});\nMeteor.publish('session', function ({\n  id\n}) {\n  // get cursor for this session\n  var sessionCursor = HelpSessions.find({\n    _id: id\n  }, {\n    fields: {\n      \"messages\": 1\n    }\n  }); // get the data, make sure the session exists\n\n  var sessionData = sessionCursor.fetch(id);\n\n  if (!sessionData) {\n    return {\n      error: \"Session not found\"\n    };\n  }\n\n  return [sessionCursor];\n});\nmodule.exportDefault(HelpSessions);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"images.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/api/images.js                                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nImages = new FS.Collection(\"images\", {\n  stores: [new FS.Store.FileSystem(\"images\", {\n    path: \"~/uploads\"\n  })]\n});\nImages.allow({\n  'insert': function () {\n    // add custom authentication code here\n    return true;\n  }\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ratings.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/api/ratings.js                                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nconst Ratings = new Mongo.Collection('ratings');\nMeteor.methods({\n  'ratings.rateUser': ({\n    userId,\n    targetUserId,\n    courseId,\n    sessionId,\n    rating,\n    message\n  }) => {\n    Ratings.insert({\n      userId,\n      targetUserId,\n      courseId,\n      sessionId,\n      rating,\n      message\n    });\n  }\n});\nMeteor.publish('ratingsForSession', function ({\n  id\n}) {\n  var ratingsCursor = Ratings.find({\n    sessionId: id\n  }, {\n    fields: {\n      _id: 1,\n      rating: 1,\n      message: 1,\n      userId: 1,\n      targetId: 1\n    }\n  });\n  return ratingsCursor;\n});\nmodule.exportDefault(Ratings);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"universities.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/api/universities.js                                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nconst Universities = new Mongo.Collection('universities');\nMeteor.methods({\n  'universities.addOne': ({\n    name,\n    abbreviation,\n    state,\n    city\n  }) => {\n    return Universities.insert({\n      name,\n      abbreviation,\n      state,\n      city,\n      messages: []\n    });\n  }\n});\nmodule.exportDefault(Universities);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"users.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/api/users.js                                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet Random;\nmodule.watch(require(\"meteor/random\"), {\n  Random(v) {\n    Random = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Courses;\nmodule.watch(require(\"./courses\"), {\n  default(v) {\n    Courses = v;\n  }\n\n}, 2);\nlet Ratings;\nmodule.watch(require(\"./ratings\"), {\n  default(v) {\n    Ratings = v;\n  }\n\n}, 3);\nAccounts.onCreateUser((options, user) => {\n  // send system message update\n  const message = {\n    _id: Random.id(),\n    text: \"Give us feedback!\",\n    createdAt: new Date(),\n    system: true // add your extra fields here; don't forget to validate the options, if needed\n\n  };\n\n  _.extend(user, {\n    createdAt: new Date(),\n    profile: {\n      name: options.name,\n      completedCourses: {},\n      rate: 0,\n      availabilities: [[], [], [], [], [], [], []] // availabilities for each day\n\n    },\n    messages: [message]\n  });\n\n  Meteor.call('sendVerificationLink', (error, response) => {\n    if (error) {\n      console.log(\"Error sending verification email.\");\n    }\n  });\n  return user;\n});\nMeteor.methods({\n  sendVerificationLink() {\n    let userId = Meteor.userId();\n\n    if (userId) {\n      return Accounts.sendVerificationEmail(userId);\n    }\n  },\n\n  // SETTERS\n  'users.setName': ({\n    name\n  }) => {\n    var profile = Meteor.user().profile;\n    profile.name = name;\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        profile: profile\n      }\n    });\n  },\n  'user.setProfilePic': ({\n    url\n  }) => {\n    var profile = Meteor.user().profile;\n    profile.profilePic = url;\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        profile: profile\n      }\n    });\n  },\n  'user.setPushNotificationToken': ({\n    token,\n    userId\n  }) => {\n    const user = Meteor.users.findOne({\n      _id: userId\n    });\n    var profile = user.profile;\n    profile.pushNotificationToken = token;\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        profile: profile\n      }\n    });\n  },\n  'users.addCompletedCourse': ({\n    courseId,\n    rate\n  }) => {\n    // attempt to find user by id\n    const user = Meteor.user();\n    const course = Courses.findOne(courseId); // make sure this user and course exists\n\n    if (!user || !course) {\n      return false;\n    } // update set query\n\n\n    var set = {\n      profile: user.profile\n    };\n    set.profile.completedCourses[courseId] = rate; // update completedCourses array in profile\n\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: set\n    });\n    return true;\n  },\n  'users.removeCompletedCourse': ({\n    courseId\n  }) => {\n    // update set query\n    const user = Meteor.user();\n    var set = {\n      profile: user.profile\n    };\n    delete set.profile.completedCourses[courseId]; // apply it\n\n    Meteor.users.update(Meteor.userId(), {\n      $set: set\n    });\n  },\n  'users.setRateForCourse': ({\n    courseId,\n    rate\n  }) => {\n    // update set query\n    const user = Meteor.user();\n    var set = {\n      profile: user.profile\n    };\n    set.profile.completedCourses[courseId] = rate; // apply it\n\n    Meteor.users.update(Meteor.userId(), {\n      $set: set\n    });\n  },\n  'users.addAvailability': ({\n    dayOfWeek,\n    hours,\n    minutes,\n    duration\n  }) => {\n    const newAvailability = {\n      hours,\n      minutes,\n      duration\n    };\n    const availabilities = Meteor.user().profile.availabilities;\n    availabilities[dayOfWeek].push(newAvailability);\n    Meteor.users.update({\n      _id: Meteor.userId()\n    }, {\n      $set: {\n        \"profile.availabilities\": availabilities\n      }\n    });\n  },\n  'users.removeAvailability': ({\n    dayOfWeek,\n    index\n  }) => {\n    const availabilities = Meteor.user().profile.availabilities;\n    availabilities[dayOfWeek].splice(index, 1);\n    Meteor.users.update({\n      _id: Meteor.userId()\n    }, {\n      $set: {\n        \"profile.availabilities\": availabilities\n      }\n    });\n  },\n  // GETTERS\n  'users.getAvailabilities': ({\n    userId\n  }) => {\n    const user = Meteor.users.findOne(userId);\n\n    if (user) {\n      const profile = user.profile;\n      return user.profile.availabilities;\n    } else {\n      return [];\n    }\n  },\n  'users.getAllWhoCompletedCourse': ({\n    courseId\n  }) => {\n    const users = Meteor.users.find({\n      \"profile.completedCourses\": {\n        $in: [courseId]\n      }\n    }, {\n      fields: {\n        \"profile\": 1\n      }\n    }).fetch();\n    return users;\n  }\n});\nMeteor.publish('tutors', function () {\n  var tutors = Meteor.users.find({\n    \"profile.completedCourses\": {\n      $ne: []\n    }\n  }, {\n    fields: {\n      profile: 1,\n      _id: 1\n    }\n  }).fetch(); // Get reviews for all these users\n\n  var idsForTutors = tutors.map(function (user) {\n    return user._id;\n  });\n  var ratingsCursor = Ratings.find({\n    targetUserId: {\n      $in: idsForTutors\n    }\n  }); // Get completed courses for all these users\n\n  var idsForCourses = tutors.map(function (user) {\n    return user.completedCourses;\n  });\n  idsForCourses = [].concat.apply([], idsForCourses);\n  var coursesCursor = Courses.find({\n    _id: {\n      $in: idsForCourses\n    }\n  }); // Get ids for users who rated this tutor\n\n  var idsForRaters = ratingsCursor.fetch().map(function (rating) {\n    return rating.userId;\n  }); // combine user Ids\n\n  let userIds = idsForTutors.concat(idsForRaters);\n  var usersCursor = Meteor.users.find({\n    _id: {\n      $in: userIds\n    }\n  });\n  return [usersCursor, ratingsCursor, coursesCursor];\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// server/main.js                                                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.watch(require(\"../imports/api/courses\"));\nmodule.watch(require(\"../imports/api/universities\"));\nmodule.watch(require(\"../imports/api/users\"));\nmodule.watch(require(\"../imports/api/helpSession\"));\nmodule.watch(require(\"../imports/api/images\"));\nmodule.watch(require(\"../imports/api/ratings\"));\nMeteor.startup(() => {// code to run on server at startup\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/courses.js","imports/api/expo.js","imports/api/helpSession.js","imports/api/images.js","imports/api/ratings.js","imports/api/universities.js","imports/api/users.js","server/main.js"],"names":["Mongo","module","watch","require","v","Meteor","Universities","default","Courses","Collection","methods","universityId","title1","title2","subject","uni","findOne","Error","insert","messages","courseId","message","update","_id","$push","publish","find","fields","courses","user","profile","completedCourses","courseIds","Object","keys","$in","exportDefault","export","SendPushNotification","Expo","expo","token","title","body","push","to","sound","data","withSome","chunks","chunkPushNotifications","chunk","receipts","sendPushNotificationsAsync","console","log","error","Random","HelpSessions","studentId","tutorId","startDate","endDate","initialMessageText","tutor","users","student","cost","initialMessageTextPrefix","text","name","createdAt","Date","id","notifications","pushNotificationToken","tutorAccepted","tutorDenied","tutorStarted","studentStarted","tutorEnded","studentEnded","denyMessage","cancelled","cancelledBy","cancelMessage","sessionId","session","system","receiver","otherUsersId","currentNotificationValue","notificationLocation","$set","userId","call","endedAt","startedAt","sessionsCursor","$or","sessions","fetch","studentIds","_","pluck","tutorIds","userIds","concat","usersCursor","coursesCursor","sessionCursor","sessionData","Images","FS","stores","Store","FileSystem","path","allow","Ratings","targetUserId","rating","ratingsCursor","targetId","abbreviation","state","city","Accounts","onCreateUser","options","extend","rate","availabilities","response","sendVerificationLink","sendVerificationEmail","url","profilePic","course","set","dayOfWeek","hours","minutes","duration","newAvailability","index","splice","tutors","$ne","idsForTutors","map","idsForCourses","apply","idsForRaters","startup"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\nimport Universities from './universities';\n\nconst Courses = new Mongo.Collection('courses');\n\nMeteor.methods({\n    'courses.addOne': ({ universityId, title1, title2, subject }) => {\n        const uni = Universities.findOne(universityId);\n\n        if (uni == null) {\n            throw new Meteor.Error('courses.addOne.notFound',\n            'University by that ID not found');\n        }\n\n        return Courses.insert({ universityId, title1, title2, subject, messages: []});\n    },\n\n    'courses.sendMessage': ({courseId, message}) => {\n        // update the messages object\n        Courses.update(\n            {_id: courseId},\n            {$push: { messages: message }}\n        )\n    },\n    \n    // 'courses.getAllForUni': ({universityId}) => {\n    //     const uni = Universities.findOne(universityId);\n\n    //     if (uni == null) {\n    //         throw new Meteor.Error('courses.addOne.notFound',\n    //         'University by that ID not found');\n    //     }\n\n    //     return Courses.find({universityId: universityId}).fetch();\n    // },\n})\n\nMeteor.publish('courses', function () {\n    return Courses.find({}, {\n        fields: { messages: 0 }\n      });\n});\n\nMeteor.publish('course', function({courseId}) {\n    return Courses.find({_id: courseId});\n})\n\nMeteor.publish('myCourses', function () {\n    const courses = Meteor.user().profile.completedCourses;\n    const courseIds = Object.keys(courses)\n    return Courses.find({_id: {$in: courseIds}}, {\n        fields: { messages: 0 }\n    });\n});\n\nexport default Courses;\n\n// Meteor.call('courses.addOne', 'bJ2ppiHYrMFRThfWE', 'Intro to Computer Science I', 'COMP 1671', 'Computer Science')\n","import Expo from 'expo-server-sdk';\n\n// Create a new Expo SDK client\nlet expo = new Expo();\n\nexport function SendPushNotification(token, title, body) {\n  // if the token doesn't exist, don't send the notification\n  if (!token) {\n    return;\n  }\n  \n  let messages = [];\n  messages.push({\n      to: token,\n      sound: 'default',\n      title: title,\n      body: body,\n      data: { withSome: null },\n  })\n  let chunks = expo.chunkPushNotifications(messages);\n  (async () => {\n    // Send the chunks to the Expo push notification service. There are\n    // different strategies you could use. A simple one is to send one chunk at a\n    // time, which nicely spreads the load out over time:\n    for (let chunk of chunks) {\n      try {\n        let receipts = await expo.sendPushNotificationsAsync(chunk);\n        console.log(receipts);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  })();\n}","import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\n\nimport Courses from \"./courses\";\nimport { SendPushNotification } from \"./expo\";\n\nconst HelpSessions = new Mongo.Collection('helpSessions');\n\nMeteor.methods({\n    // SETTERS\n    'helpSessions.create': ({ studentId, tutorId, courseId, startDate, endDate, initialMessageText }) => {\n        // get cost of this session\n        tutor = Meteor.users.findOne({_id: tutorId})\n        student = Meteor.users.findOne({_id: studentId});\n        cost = tutor.profile.completedCourses[courseId]\n        // make sure cost, tutor and student exist\n        if (!cost || !tutor || !student) {\n            return false\n        }\n        // create initial message\n        const initialMessageTextPrefix = \"Hi! I need help with \"\n        const message = {\n            text: initialMessageTextPrefix + initialMessageText,\n            user: {\n                _id: studentId,\n                name: student.profile.name,\n            },\n            createdAt: new Date(),\n            _id: Random.id(),\n        }\n        // create the messages and notifications for this help session\n        var messages = [message]\n        var notifications = {}\n        notifications[tutorId] = 1\n        notifications[student] = 0\n\n        // Send push notification to the tutor\n        if (tutor.profile.pushNotificationToken) {\n            SendPushNotification(tutor.profile.pushNotificationToken, student.profile.name + \" needs help!\", message.text)\n        }\n\n        // create new help session with link to convo\n        return HelpSessions.insert({ studentId, tutorId, courseId, cost, startDate, endDate, tutorAccepted: false, tutorDenied: false, tutorStarted: false, studentStarted: false, tutorEnded: false, studentEnded: false,  denyMessage: \"\", cancelled: false, cancelledBy: null, cancelMessage: \"\", messages, notifications  });\n    },\n\n    'helpSessions.sendMessage': ({sessionId, message}) => {\n        const session = HelpSessions.findOne(sessionId)\n        // update the messages object\n        HelpSessions.update(\n            {_id: sessionId},\n            {$push: { \"messages\": message }}\n        )\n\n        // if it's a system message, don't do notifications\n        // TODO: Send notifications but don't use message info or else there is an error\n        if (message.system === true) {\n            return;\n        }\n\n        // Send push notification to receipiant\n        SendPushNotification(receiver.profile.pushNotificationToken, Meteor.user().profile.name + \" sent you a message!\", message.text)\n        \n        // update the notifications\n        const otherUsersId = message.user._id == session.tutorId ? session.studentId : session.tutorId\n        const receiver = Meteor.users.findOne(otherUsersId);\n        const currentNotificationValue = session.notifications[otherUsersId] || 0\n        const notificationLocation = `notifications.${otherUsersId}`\n        HelpSessions.update(\n            {_id: sessionId},\n            {$set: { [notificationLocation]: currentNotificationValue + 1 }}\n        )\n    },\n\n    'helpSessions.clearNotificationsForUser': ({sessionId}) => {\n        const notificationLocation = `notifications.${Meteor.userId()}`\n        HelpSessions.update(\n            {_id: sessionId},\n            {$set: { [notificationLocation]: 0 }}\n        )\n    },\n    \n    'helpSessions.accept': ({ sessionId }) => {\n        // find session\n        const session = HelpSessions.findOne(sessionId)\n        const tutor = Meteor.users.findOne({_id: session.tutorId})\n        const student = Meteor.users.findOne({_id: session.studentId});\n        // make sure this user has authority to accept a session\n        if (session.tutorId == Meteor.userId()) {\n            HelpSessions.update(\n                {_id: sessionId},\n                {$set: {tutorAccepted: true}}\n            )\n\n            // send system message update\n            const message = {\n                text: tutor.profile.name + \" accepted! Figure out where to meet.\",\n                createdAt: new Date(),\n                system: true,\n                _id: Random.id(),\n            }\n            // send system message\n            Meteor.call(\"helpSessions.sendMessage\", {sessionId: sessionId, message})\n\n            // Send push notification to the student IF they have a notification token\n            if (student.profile.pushNotificationToken) {\n                SendPushNotification(student.profile.pushNotificationToken, tutor.profile.name + \" accepted your request!\")\n            }\n\n            return true\n        }\n        return {error: \"You do not have access to this session\"}\n    },\n    'helpSessions.end': ({ sessionId }) => {\n        // find session\n        const session = HelpSessions.findOne(sessionId)\n        if (session.tutorId == Meteor.userId()) {\n            HelpSessions.update(\n                {_id: sessionId},\n                {$set: {tutorEnded: true}}\n            )\n            session.tutorEnded = true\n        } else if (session.studentId == Meteor.userId()){\n            HelpSessions.update(\n                {_id: sessionId},\n                {$set: {studentEnded: true}}\n            )\n        }\n        // if they both ended, add an ended date\n        if (session.studentEnded && session.tutorEnded) {\n            HelpSessions.update(\n                {_id: sessionId},\n                {$set: {endedAt: new Date()}}\n            )\n            session.studentEnded = true\n        }\n    },\n    'helpSessions.start': ({ sessionId }) => {\n        const session = HelpSessions.findOne(sessionId)\n        const userId = Meteor.userId()\n        // make sure session exists\n        if (!session) {\n            return {error: \"Session not found\"}\n        }\n        // if the user is the tutor, set tutorAccepted to true\n        if (session.tutorId == userId) {\n            // edit local document so we can check the values later\n            session.tutorStarted = true\n            HelpSessions.update(\n                sessionId, \n                {$set: {tutorStarted: true}}\n            )\n        }\n        // if the user is the student, set studentAccepted to true\n        if (session.studentId == userId) {\n            // edit local document so we can check the values later\n            session.studentStarted = true\n            HelpSessions.update(\n                sessionId, \n                {$set: {studentStarted: true}}\n            )\n        }\n        // set started at if both have started\n        if (session.tutorStarted && session.studentStarted) {\n            HelpSessions.update(\n                sessionId, \n                {$set: {startedAt: new Date()}}\n            )\n        }\n    }\n});\n\nMeteor.publish('mySessions', function () {\n    var sessionsCursor = HelpSessions.find({$or: [{studentId: Meteor.userId()}, {tutorId: Meteor.userId()}]}, {\n        fields: { \"messages\": 0 }\n    })\n    var sessions = sessionsCursor.fetch()\n\n    var studentIds =  _.pluck(sessions,\"studentId\");\n    var tutorIds = _.pluck(sessions,\"tutorId\");\n\n    var userIds = tutorIds.concat(studentIds);\n    var courseIds = _.pluck(sessions, \"courseId\")\n\n    var usersCursor = Meteor.users.find({\n        _id : {$in : userIds}\n    });\n\n    var coursesCursor = Courses.find({_id: {$in : courseIds}})\n\n    return [\n        sessionsCursor,\n        usersCursor,\n        coursesCursor,\n    ];\n});\n\nMeteor.publish('session', function({id}) {\n    // get cursor for this session\n    var sessionCursor = HelpSessions.find({_id: id}, {\n        fields: {\"messages\": 1}\n    })\n    // get the data, make sure the session exists\n    var sessionData = sessionCursor.fetch(id)\n    if (!sessionData) {\n        return {error: \"Session not found\"}\n    }\n\n    return [\n        sessionCursor,\n    ];\n});\n\nexport default HelpSessions;","Images = new FS.Collection(\"images\", {\n    stores: [new FS.Store.FileSystem(\"images\", {path: \"~/uploads\"})]\n});\n\nImages.allow({\n    'insert': function () {\n        // add custom authentication code here\n        return true;\n    }\n});","import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\n\nconst Ratings = new Mongo.Collection('ratings');\n\nMeteor.methods({\n    'ratings.rateUser': ({userId, targetUserId, courseId, sessionId, rating, message}) => {\n        Ratings.insert({userId, targetUserId, courseId, sessionId, rating, message})\n    },\n})\n\nMeteor.publish('ratingsForSession', function ({id}) {\n    var ratingsCursor = Ratings.find({sessionId: id}, {\n        fields: {_id: 1, rating: 1, message: 1, userId: 1, targetId: 1}\n    })\n\n    return ratingsCursor;\n});\n\nexport default Ratings;","import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\n\nconst Universities = new Mongo.Collection('universities');\n\nMeteor.methods({\n    'universities.addOne': ({ name, abbreviation, state, city }) => {\n        return Universities.insert({ name, abbreviation, state, city, messages: [] });\n    },\n})\n\nexport default Universities;\n","import { Random } from 'meteor/random'\nimport { Meteor } from 'meteor/meteor';\nimport Courses from \"./courses\";\nimport Ratings from \"./ratings\";\n\nAccounts.onCreateUser((options, user) => {\n    // send system message update\n    const message = {\n        _id: Random.id(),\n        text: \"Give us feedback!\",\n        createdAt: new Date(),\n        system: true,\n    }\n    // add your extra fields here; don't forget to validate the options, if needed\n    _.extend(user, {\n        createdAt: new Date(),\n        profile: {\n            name: options.name,\n            completedCourses: {},\n            rate: 0,\n            availabilities: [[],[],[],[],[],[],[]], // availabilities for each day\n        },\n        messages: [message],\n    });\n\n    Meteor.call( 'sendVerificationLink', ( error, response ) => {\n        if ( error ) {\n            console.log(\"Error sending verification email.\")\n        }\n    });\n    \n    return user;\n});\n\nMeteor.methods({\n    sendVerificationLink() {\n        let userId = Meteor.userId();\n        if ( userId ) {\n            return Accounts.sendVerificationEmail( userId );\n        }\n    },\n    // SETTERS\n    'users.setName': ({name}) => {\n        var profile = Meteor.user().profile\n        \n        profile.name = name\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: {profile: profile} }\n        )\n    },\n\n    'user.setProfilePic': ({url}) => {\n        var profile = Meteor.user().profile\n        profile.profilePic = url\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: {profile: profile} }\n        )\n    },\n\n    'user.setPushNotificationToken': ({token, userId}) => {\n        const user = Meteor.users.findOne({_id: userId})\n        var profile = user.profile\n        profile.pushNotificationToken = token\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: {profile: profile} }\n        )\n    },\n\n    'users.addCompletedCourse': ({courseId, rate}) => {\n        // attempt to find user by id\n        const user = Meteor.user();\n        const course = Courses.findOne(courseId);\n        // make sure this user and course exists\n        if (!user || !course) {\n            return false;\n        }\n        // update set query\n        var set = {profile: user.profile};\n        set.profile.completedCourses[courseId] = rate;\n        // update completedCourses array in profile\n        Meteor.users.update(\n            {_id: user._id}, \n            { $set: set }\n        )\n        return true;\n    },\n\n    'users.removeCompletedCourse': ({courseId}) => {\n        // update set query\n        const user = Meteor.user();\n        var set = {profile: user.profile};\n        delete set.profile.completedCourses[courseId];\n        // apply it\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: set }\n        )\n    },\n\n    'users.setRateForCourse': ({courseId, rate}) => {\n        // update set query\n        const user = Meteor.user();\n        var set = {profile: user.profile};\n        set.profile.completedCourses[courseId] = rate;\n        // apply it\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: set }\n        )\n    },\n\n    'users.addAvailability': ({dayOfWeek, hours, minutes, duration}) => {\n        const newAvailability = {hours, minutes, duration}\n        const availabilities = Meteor.user().profile.availabilities\n        availabilities[dayOfWeek].push(newAvailability)\n        Meteor.users.update(\n            {_id: Meteor.userId()}, \n            { $set: {\"profile.availabilities\": availabilities} }\n        )\n    },\n\n    'users.removeAvailability': ({dayOfWeek, index}) => {\n        const availabilities = Meteor.user().profile.availabilities\n        availabilities[dayOfWeek].splice(index, 1)\n        Meteor.users.update(\n            {_id: Meteor.userId()}, \n            { $set: {\"profile.availabilities\": availabilities} }\n        )\n    },\n\n    // GETTERS\n    'users.getAvailabilities': ({userId}) => {\n        const user = Meteor.users.findOne(userId)\n        \n        if (user) {\n            const profile = user.profile\n            return user.profile.availabilities\n        } else {\n            return []\n        }\n        \n    },\n\n    'users.getAllWhoCompletedCourse': ({courseId}) => {\n        const users = Meteor.users.find(\n            { \"profile.completedCourses\": { $in: [ courseId ] }},\n            {fields: { \"profile\": 1,} \n        }).fetch();\n\n        return users;\n    },\n})\n\nMeteor.publish('tutors', function () {\n    var tutors = Meteor.users.find(\n        {\"profile.completedCourses\": {$ne: []}},\n        {\n            fields: {\n                profile: 1, _id: 1,\n            }\n        }\n    ).fetch()\n    // Get reviews for all these users\n    var idsForTutors = tutors.map(function(user) { \n        return user._id;\n    }); \n    var ratingsCursor = Ratings.find({ targetUserId: { $in: idsForTutors } });\n    // Get completed courses for all these users\n    var idsForCourses = tutors.map(function(user) { \n        return user.completedCourses;\n    })\n    idsForCourses = [].concat.apply([], idsForCourses);\n    var coursesCursor = Courses.find({ _id: { $in: idsForCourses } });\n\n    // Get ids for users who rated this tutor\n    var idsForRaters = ratingsCursor.fetch().map(function(rating) { \n        return rating.userId;\n    }); \n    // combine user Ids\n    let userIds = idsForTutors.concat(idsForRaters);\n    var usersCursor = Meteor.users.find({_id: { $in: userIds } });\n    return [\n        usersCursor,\n        ratingsCursor,\n        coursesCursor\n    ]\n});","import { Meteor } from 'meteor/meteor';\nimport '../imports/api/courses';\nimport '../imports/api/universities';\nimport '../imports/api/users';\nimport '../imports/api/helpSession';\nimport '../imports/api/images';\nimport '../imports/api/ratings';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]