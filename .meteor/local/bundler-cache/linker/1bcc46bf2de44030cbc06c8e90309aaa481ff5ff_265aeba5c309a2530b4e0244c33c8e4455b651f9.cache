[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nlodash = Package['erasaur:meteor-lodash'].lodash;\n_ = Package.underscore._;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nFS = Package['cfs:base-package'].FS;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"courses.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// imports/api/courses.js                                                                    //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Universities;\nmodule.watch(require(\"./universities\"), {\n  default(v) {\n    Universities = v;\n  }\n\n}, 2);\nconst Courses = new Mongo.Collection('courses');\nMeteor.methods({\n  'courses.addOne': ({\n    universityId,\n    title1,\n    title2,\n    subject\n  }) => {\n    const uni = Universities.findOne(universityId);\n\n    if (uni == null) {\n      throw new Meteor.Error('courses.addOne.notFound', 'University by that ID not found');\n    }\n\n    return Courses.insert({\n      universityId,\n      title1,\n      title2,\n      subject\n    });\n  },\n  'courses.getAllForUni': ({\n    universityId\n  }) => {\n    const uni = Universities.findOne(universityId);\n\n    if (uni == null) {\n      throw new Meteor.Error('courses.addOne.notFound', 'University by that ID not found');\n    }\n\n    return Courses.find({\n      universityId: universityId\n    }).fetch();\n  }\n});\nmodule.exportDefault(Courses);\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"images.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// imports/api/images.js                                                                     //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nImages = new FS.Collection(\"images\", {\n  stores: [new FS.Store.FileSystem(\"images\", {\n    path: \"~/uploads\"\n  })]\n});\nImages.allow({\n  'insert': function () {\n    // add custom authentication code here\n    return true;\n  }\n});\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"universities.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// imports/api/universities.js                                                               //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nconst Universities = new Mongo.Collection('universities');\nMeteor.methods({\n  'universities.addOne': ({\n    name,\n    abbreviation,\n    state,\n    city\n  }) => {\n    return Universities.insert({\n      name,\n      abbreviation,\n      state,\n      city\n    });\n  }\n});\nmodule.exportDefault(Universities);\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"users.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// imports/api/users.js                                                                      //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nAccounts.onCreateUser((options, user) => {\n  // add your extra fields here; don't forget to validate the options, if needed\n  _.extend(user, {\n    createdAt: new Date(),\n    profile: {\n      name: options.name,\n      imageId: null,\n      completedCourses: [],\n      rate: 0,\n      availabilities: []\n    }\n  });\n\n  return user;\n});\nMeteor.methods({\n  // SETTERS\n  'users.setName': ({\n    name\n  }) => {\n    var profile = Meteor.user().profile;\n    profile.name = name;\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        profile: profile\n      }\n    });\n  },\n  'users.setProfileImage': ({\n    image\n  }) => {\n    FS.Utility.eachFile(event, function (image) {\n      Images.insert(file, function (err, fileObj) {\n        if (err) {\n          return false;\n        } else {\n          // update profile to include profile image id\n          Meteor.users.update(Meteor.userId(), {\n            $set: {\n              \"profile.imageId\": fileObj_id\n            }\n          });\n          return true;\n        } // Inserted new doc with ID fileObj._id, and kicked off the data upload using HTTP\n\n      });\n    });\n  },\n  'users.setRate': ({\n    rate\n  }) => {\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        \"profile.rate\": rate\n      }\n    });\n  },\n  'users.addAvailability': ({\n    date,\n    length,\n    repeats\n  }) => {\n    var newAvailability = {\n      \"date\": date,\n      \"length\": length,\n      \"repeats\": repeats\n    };\n    console.log(newAvailability);\n    Meteor.users.update({\n      _id: Meteor.userId()\n    }, {\n      $addToSet: {\n        \"profile.availabilities\": newAvailability\n      }\n    });\n  },\n  // GETTERS\n  'users.getAvailabilities': ({\n    userId\n  }) => {\n    console.log(\"userId: \", userId);\n    const user = Meteor.users.findOne(userId);\n\n    if (user != 'undefined') {\n      const profile = user.profile;\n      return user.profile.availabilities;\n    } else {\n      return [];\n    }\n  },\n  'users.getAllWhoCompletedCourse': ({\n    courseId\n  }) => {\n    const users = Meteor.users.find({\n      \"profile.completedCourses\": {\n        $in: [courseId]\n      }\n    }, {\n      fields: {\n        \"profile\": 1\n      }\n    }).fetch();\n    return users;\n  },\n  'users.addCompletedCourse': ({\n    courseId\n  }) => {\n    // attempt to find user by id\n    const user = Meteor.user(); // make sure this user exists\n\n    if (user == null) {\n      return false;\n    } // update completedCourses array in profile\n\n\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $addToSet: {\n        \"profile.completedCourses\": courseId\n      }\n    });\n    return true;\n  }\n});\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                           //\n// server/main.js                                                                            //\n//                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                             //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.watch(require(\"../imports/api/courses\"));\nmodule.watch(require(\"../imports/api/universities\"));\nmodule.watch(require(\"../imports/api/users\"));\nmodule.watch(require(\"../imports/api/helpSessionRequest\"));\nmodule.watch(require(\"../imports/api/images\"));\nMeteor.startup(() => {// code to run on server at startup\n});\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/courses.js","imports/api/images.js","imports/api/universities.js","imports/api/users.js","server/main.js"],"names":["Mongo","module","watch","require","v","Meteor","Universities","default","Courses","Collection","methods","universityId","title1","title2","subject","uni","findOne","Error","insert","find","fetch","exportDefault","Images","FS","stores","Store","FileSystem","path","allow","name","abbreviation","state","city","Accounts","onCreateUser","options","user","_","extend","createdAt","Date","profile","imageId","completedCourses","rate","availabilities","users","update","userId","$set","image","Utility","eachFile","event","file","err","fileObj","fileObj_id","date","length","repeats","newAvailability","console","log","_id","$addToSet","courseId","$in","fields","startup"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\nimport Universities from './universities';\n\nconst Courses = new Mongo.Collection('courses');\n\nMeteor.methods({\n    'courses.addOne': ({ universityId, title1, title2, subject }) => {\n        const uni = Universities.findOne(universityId);\n\n        if (uni == null) {\n            throw new Meteor.Error('courses.addOne.notFound',\n            'University by that ID not found');\n        }\n\n        return Courses.insert({ universityId, title1, title2, subject });\n    },\n    \n    'courses.getAllForUni': ({universityId}) => {\n        const uni = Universities.findOne(universityId);\n\n        if (uni == null) {\n            throw new Meteor.Error('courses.addOne.notFound',\n            'University by that ID not found');\n        }\n\n        return Courses.find({universityId: universityId}).fetch();\n    },\n})\n\nexport default Courses;\n\n// Meteor.call('courses.addOne', 'bJ2ppiHYrMFRThfWE', 'Intro to Computer Science I', 'COMP 1671', 'Computer Science')\n","Images = new FS.Collection(\"images\", {\n    stores: [new FS.Store.FileSystem(\"images\", {path: \"~/uploads\"})]\n});\n\nImages.allow({\n    'insert': function () {\n        // add custom authentication code here\n        return true;\n    }\n});","import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\n\nconst Universities = new Mongo.Collection('universities');\n\nMeteor.methods({\n    'universities.addOne': ({ name, abbreviation, state, city }) => {\n        return Universities.insert({ name, abbreviation, state, city });\n    },\n})\n\nexport default Universities;\n","Accounts.onCreateUser((options, user) => {\n    // add your extra fields here; don't forget to validate the options, if needed\n    _.extend(user, {\n        createdAt: new Date(),\n        profile: {\n            name: options.name,\n            imageId: null,\n            completedCourses: [],\n            rate: 0,\n            availabilities: [],\n        }\n    });\n    \n    return user;\n});\n\nMeteor.methods({\n    // SETTERS\n    'users.setName': ({name}) => {\n        var profile = Meteor.user().profile\n        profile.name = name\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: {profile: profile} }\n        )\n    },\n\n    'users.setProfileImage': ({image}) => {\n        FS.Utility.eachFile(event, function(image) {\n            Images.insert(file, function (err, fileObj) {\n                if (err) {\n                    return false;\n                } else {\n                    // update profile to include profile image id\n                    Meteor.users.update(\n                        Meteor.userId(), \n                        { $set: {\"profile.imageId\": fileObj_id} }\n                    )\n                    return true;\n                }\n                // Inserted new doc with ID fileObj._id, and kicked off the data upload using HTTP\n            });\n        });\n    },\n\n    'users.setRate': ({rate}) => {\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: {\"profile.rate\": rate} }\n        )\n    },\n\n    'users.addAvailability': ({date, length, repeats}) => {\n        var newAvailability = {\"date\": date, \"length\": length, \"repeats\": repeats}\n        console.log(newAvailability)\n        Meteor.users.update(\n            {_id: Meteor.userId()}, \n            { $addToSet: {\"profile.availabilities\": newAvailability} }\n        )\n    },\n\n    // GETTERS\n    'users.getAvailabilities': ({userId}) => {\n        console.log(\"userId: \", userId)\n        const user = Meteor.users.findOne(userId)\n        \n        if (user != 'undefined') {\n            const profile = user.profile\n            return user.profile.availabilities\n        } else {\n            return []\n        }\n        \n    },\n\n    'users.getAllWhoCompletedCourse': ({courseId}) => {\n        const users = Meteor.users.find(\n            { \"profile.completedCourses\": { $in: [ courseId ] }},\n            {fields: { \"profile\": 1,} \n        }).fetch();\n\n        return users;\n    },\n\n    'users.addCompletedCourse': ({courseId}) => {\n        // attempt to find user by id\n        const user = Meteor.user();\n        // make sure this user exists\n        if (user == null) {\n            return false;\n        }\n\n        // update completedCourses array in profile\n        Meteor.users.update(\n            {_id: user._id}, \n            { $addToSet: {\"profile.completedCourses\": courseId} }\n        )\n        return true;\n    }\n})","import { Meteor } from 'meteor/meteor';\nimport '../imports/api/courses';\nimport '../imports/api/universities';\nimport '../imports/api/users';\nimport '../imports/api/helpSessionRequest';\nimport '../imports/api/images';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]