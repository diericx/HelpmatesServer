[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nlodash = Package['erasaur:meteor-lodash'].lodash;\n_ = Package.underscore._;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nFS = Package['cfs:base-package'].FS;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"conversations.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// imports/api/conversations.js                                                                //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nconst Conversations = new Mongo.Collection('conversations');\nMeteor.methods({\n  'conversations.sendMessage': ({\n    conversationId,\n    message\n  }) => {\n    // const convo = Conversations.findOne(conversationId);\n    Conversations.update({\n      _id: conversationId\n    }, {\n      $push: {\n        messages: message\n      }\n    }); // return Courses.insert({ universityId, title1, title2, subject });\n  }\n});\nmodule.exportDefault(Conversations);\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"courses.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// imports/api/courses.js                                                                      //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Universities;\nmodule.watch(require(\"./universities\"), {\n  default(v) {\n    Universities = v;\n  }\n\n}, 2);\nlet Conversations;\nmodule.watch(require(\"./conversations\"), {\n  default(v) {\n    Conversations = v;\n  }\n\n}, 3);\nconst Courses = new Mongo.Collection('courses');\nMeteor.methods({\n  'courses.addOne': ({\n    universityId,\n    title1,\n    title2,\n    subject\n  }) => {\n    const uni = Universities.findOne(universityId);\n\n    if (uni == null) {\n      throw new Meteor.Error('courses.addOne.notFound', 'University by that ID not found');\n    } // create new conversation\n\n\n    conversationId = Conversations.insert({\n      messages: []\n    });\n    return Courses.insert({\n      universityId,\n      title1,\n      title2,\n      subject,\n      conversationId\n    });\n  },\n  'courses.getAllForUni': ({\n    universityId\n  }) => {\n    const uni = Universities.findOne(universityId);\n\n    if (uni == null) {\n      throw new Meteor.Error('courses.addOne.notFound', 'University by that ID not found');\n    }\n\n    return Courses.find({\n      universityId: universityId\n    }).fetch();\n  }\n});\nMeteor.publish('courses', function () {\n  return Courses.find({});\n});\nMeteor.publish('courseChat', function ({\n  id\n}) {\n  // get course data\n  var course = Courses.findOne({\n    _id: id\n  });\n  return Conversations.find({\n    _id: course.conversationId\n  });\n});\nmodule.exportDefault(Courses);\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"helpSession.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// imports/api/helpSession.js                                                                  //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\nthrow new Error(\"Unexpected token, expected \\\";\\\" (24:54)\");\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"images.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// imports/api/images.js                                                                       //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\nImages = new FS.Collection(\"images\", {\n  stores: [new FS.Store.FileSystem(\"images\", {\n    path: \"~/uploads\"\n  })]\n});\nImages.allow({\n  'insert': function () {\n    // add custom authentication code here\n    return true;\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"universities.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// imports/api/universities.js                                                                 //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nconst Universities = new Mongo.Collection('universities');\nMeteor.methods({\n  'universities.addOne': ({\n    name,\n    abbreviation,\n    state,\n    city\n  }) => {\n    return Universities.insert({\n      name,\n      abbreviation,\n      state,\n      city\n    });\n  }\n});\nmodule.exportDefault(Universities);\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"users.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// imports/api/users.js                                                                        //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\nlet Courses;\nmodule.watch(require(\"./courses\"), {\n  default(v) {\n    Courses = v;\n  }\n\n}, 0);\nAccounts.onCreateUser((options, user) => {\n  // add your extra fields here; don't forget to validate the options, if needed\n  _.extend(user, {\n    createdAt: new Date(),\n    profile: {\n      name: options.name,\n      imageId: null,\n      completedCourses: {},\n      rate: 0,\n      availabilities: []\n    }\n  });\n\n  return user;\n});\nMeteor.methods({\n  // SETTERS\n  'users.setName': ({\n    name\n  }) => {\n    var profile = Meteor.user().profile;\n    profile.name = name;\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        profile: profile\n      }\n    });\n  },\n  'users.setProfileImage': ({\n    image\n  }) => {\n    FS.Utility.eachFile(event, function (image) {\n      Images.insert(file, function (err, fileObj) {\n        if (err) {\n          return false;\n        } else {\n          // update profile to include profile image id\n          Meteor.users.update(Meteor.userId(), {\n            $set: {\n              \"profile.imageId\": fileObj_id\n            }\n          });\n          return true;\n        } // Inserted new doc with ID fileObj._id, and kicked off the data upload using HTTP\n\n      });\n    });\n  },\n  'users.addCompletedCourse': ({\n    courseId,\n    rate\n  }) => {\n    // attempt to find user by id\n    const user = Meteor.user();\n    const course = Courses.findOne(courseId); // make sure this user and course exists\n\n    if (!user || !course) {\n      return false;\n    } // update set query\n\n\n    var set = {\n      profile: user.profile\n    };\n    set.profile.completedCourses[courseId] = rate; // update completedCourses array in profile\n\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: set\n    });\n    return true;\n  },\n  'users.removeCompletedCourse': ({\n    courseId\n  }) => {\n    // update set query\n    const user = Meteor.user();\n    var set = {\n      profile: user.profile\n    };\n    delete set.profile.completedCourses[courseId]; // apply it\n\n    Meteor.users.update(Meteor.userId(), {\n      $set: set\n    });\n  },\n  'users.setRateForCourse': ({\n    courseId,\n    rate\n  }) => {\n    // update set query\n    const user = Meteor.user();\n    var set = {\n      profile: user.profile\n    };\n    set.profile.completedCourses[courseId] = rate; // apply it\n\n    Meteor.users.update(Meteor.userId(), {\n      $set: set\n    });\n  },\n  'users.addAvailability': ({\n    date,\n    length,\n    repeats\n  }) => {\n    var newAvailability = {\n      \"date\": date,\n      \"length\": length,\n      \"repeats\": repeats\n    };\n    console.log(newAvailability);\n    Meteor.users.update({\n      _id: Meteor.userId()\n    }, {\n      $addToSet: {\n        \"profile.availabilities\": newAvailability\n      }\n    });\n  },\n  // GETTERS\n  'users.getAvailabilities': ({\n    userId\n  }) => {\n    const user = Meteor.users.findOne(userId);\n\n    if (user) {\n      const profile = user.profile;\n      return user.profile.availabilities;\n    } else {\n      return [];\n    }\n  },\n  'users.getAllWhoCompletedCourse': ({\n    courseId\n  }) => {\n    const users = Meteor.users.find({\n      \"profile.completedCourses\": {\n        $in: [courseId]\n      }\n    }, {\n      fields: {\n        \"profile\": 1\n      }\n    }).fetch();\n    return users;\n  }\n});\nMeteor.publish('tutors', function () {\n  var tutors = Meteor.users.find({\n    \"profile.completedCourses\": {\n      $ne: []\n    }\n  }, {\n    fields: {\n      profile: 1,\n      _id: 1\n    }\n  });\n  return tutors;\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// server/main.js                                                                              //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.watch(require(\"../imports/api/courses\"));\nmodule.watch(require(\"../imports/api/universities\"));\nmodule.watch(require(\"../imports/api/users\"));\nmodule.watch(require(\"../imports/api/helpSession\"));\nmodule.watch(require(\"../imports/api/conversations\"));\nmodule.watch(require(\"../imports/api/images\"));\nMeteor.startup(() => {// code to run on server at startup\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/conversations.js","imports/api/courses.js","imports/api/images.js","imports/api/universities.js","imports/api/users.js","server/main.js"],"names":["Mongo","module","watch","require","v","Meteor","Conversations","Collection","methods","conversationId","message","update","_id","$push","messages","exportDefault","Universities","default","Courses","universityId","title1","title2","subject","uni","findOne","Error","insert","find","fetch","publish","id","course","Images","FS","stores","Store","FileSystem","path","allow","name","abbreviation","state","city","Accounts","onCreateUser","options","user","_","extend","createdAt","Date","profile","imageId","completedCourses","rate","availabilities","users","userId","$set","image","Utility","eachFile","event","file","err","fileObj","fileObj_id","courseId","set","date","length","repeats","newAvailability","console","log","$addToSet","$in","fields","tutors","$ne","startup"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\n\nconst Conversations = new Mongo.Collection('conversations');\n\nMeteor.methods({\n    'conversations.sendMessage': ({ conversationId, message }) => {\n        // const convo = Conversations.findOne(conversationId);\n        Conversations.update(\n            {_id: conversationId},\n            {$push: { messages: message }}\n        )\n        // return Courses.insert({ universityId, title1, title2, subject });\n    },\n});\n\nexport default Conversations;","import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\nimport Universities from './universities';\nimport Conversations from './conversations';\n\nconst Courses = new Mongo.Collection('courses');\n\nMeteor.methods({\n    'courses.addOne': ({ universityId, title1, title2, subject }) => {\n        const uni = Universities.findOne(universityId);\n\n        if (uni == null) {\n            throw new Meteor.Error('courses.addOne.notFound',\n            'University by that ID not found');\n        }\n\n        // create new conversation\n        conversationId = Conversations.insert({messages: []})\n\n        return Courses.insert({ universityId, title1, title2, subject, conversationId });\n    },\n    \n    'courses.getAllForUni': ({universityId}) => {\n        const uni = Universities.findOne(universityId);\n\n        if (uni == null) {\n            throw new Meteor.Error('courses.addOne.notFound',\n            'University by that ID not found');\n        }\n\n        return Courses.find({universityId: universityId}).fetch();\n    },\n})\n\nMeteor.publish('courses', function () {\n    return Courses.find({})\n});\n\nMeteor.publish('courseChat', function({id}) {\n    // get course data\n    var course = Courses.findOne({_id: id})\n    return Conversations.find({_id: course.conversationId})\n});\n\nexport default Courses;\n\n// Meteor.call('courses.addOne', 'bJ2ppiHYrMFRThfWE', 'Intro to Computer Science I', 'COMP 1671', 'Computer Science')\n","Images = new FS.Collection(\"images\", {\n    stores: [new FS.Store.FileSystem(\"images\", {path: \"~/uploads\"})]\n});\n\nImages.allow({\n    'insert': function () {\n        // add custom authentication code here\n        return true;\n    }\n});","import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\n\nconst Universities = new Mongo.Collection('universities');\n\nMeteor.methods({\n    'universities.addOne': ({ name, abbreviation, state, city }) => {\n        return Universities.insert({ name, abbreviation, state, city });\n    },\n})\n\nexport default Universities;\n","import Courses from \"./courses\";\n\nAccounts.onCreateUser((options, user) => {\n    // add your extra fields here; don't forget to validate the options, if needed\n    _.extend(user, {\n        createdAt: new Date(),\n        profile: {\n            name: options.name,\n            imageId: null,\n            completedCourses: {},\n            rate: 0,\n            availabilities: [],\n        }\n    });\n    \n    return user;\n});\n\nMeteor.methods({\n    // SETTERS\n    'users.setName': ({name}) => {\n        var profile = Meteor.user().profile\n        profile.name = name\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: {profile: profile} }\n        )\n    },\n\n    'users.setProfileImage': ({image}) => {\n        FS.Utility.eachFile(event, function(image) {\n            Images.insert(file, function (err, fileObj) {\n                if (err) {\n                    return false;\n                } else {\n                    // update profile to include profile image id\n                    Meteor.users.update(\n                        Meteor.userId(), \n                        { $set: {\"profile.imageId\": fileObj_id} }\n                    )\n                    return true;\n                }\n                // Inserted new doc with ID fileObj._id, and kicked off the data upload using HTTP\n            });\n        });\n    },\n\n    'users.addCompletedCourse': ({courseId, rate}) => {\n        // attempt to find user by id\n        const user = Meteor.user();\n        const course = Courses.findOne(courseId);\n        // make sure this user and course exists\n        if (!user || !course) {\n            return false;\n        }\n        // update set query\n        var set = {profile: user.profile};\n        set.profile.completedCourses[courseId] = rate;\n        // update completedCourses array in profile\n        Meteor.users.update(\n            {_id: user._id}, \n            { $set: set }\n        )\n        return true;\n    },\n\n    'users.removeCompletedCourse': ({courseId}) => {\n        // update set query\n        const user = Meteor.user();\n        var set = {profile: user.profile};\n        delete set.profile.completedCourses[courseId];\n        // apply it\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: set }\n        )\n    },\n\n    'users.setRateForCourse': ({courseId, rate}) => {\n        // update set query\n        const user = Meteor.user();\n        var set = {profile: user.profile};\n        set.profile.completedCourses[courseId] = rate;\n        // apply it\n        Meteor.users.update(\n            Meteor.userId(), \n            { $set: set }\n        )\n    },\n\n    'users.addAvailability': ({date, length, repeats}) => {\n        var newAvailability = {\"date\": date, \"length\": length, \"repeats\": repeats}\n        console.log(newAvailability)\n        Meteor.users.update(\n            {_id: Meteor.userId()}, \n            { $addToSet: {\"profile.availabilities\": newAvailability} }\n        )\n    },\n\n    // GETTERS\n    'users.getAvailabilities': ({userId}) => {\n        const user = Meteor.users.findOne(userId)\n        \n        if (user) {\n            const profile = user.profile\n            return user.profile.availabilities\n        } else {\n            return []\n        }\n        \n    },\n\n    'users.getAllWhoCompletedCourse': ({courseId}) => {\n        const users = Meteor.users.find(\n            { \"profile.completedCourses\": { $in: [ courseId ] }},\n            {fields: { \"profile\": 1,} \n        }).fetch();\n\n        return users;\n    },\n})\n\nMeteor.publish('tutors', function () {\n    var tutors = Meteor.users.find(\n        {\"profile.completedCourses\": {$ne: []}},\n        {\n            fields: {\n                profile: 1, _id: 1,\n            }\n        }\n    )\n    return tutors\n});","import { Meteor } from 'meteor/meteor';\nimport '../imports/api/courses';\nimport '../imports/api/universities';\nimport '../imports/api/users';\nimport '../imports/api/helpSession';\nimport '../imports/api/conversations';\nimport '../imports/api/images';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]